
{
  ".env": "",
  "README.md": "# Firebase Studio\n\nThis is a NextJS starter in Firebase Studio.\n\nTo get started, take a look at src/app/page.tsx.\n\n## How to Reconstruct this Project Locally\n\nThis project includes a bundling system to help you download the code.\n\n1.  Create an empty folder on your local machine.\n2.  Copy the entire content of the `project_bundle.json` file from this project and save it as `project_bundle.json` inside your new folder.\n3.  Copy the entire content of the `reconstruct.js` file from this project and save it as `reconstruct.js` inside the same folder.\n4.  Open your terminal, navigate into your new folder, and run the following command:\n    ```bash\n    node reconstruct.js\n    ```\n5.  This script will recreate all the project files and folders. Once it's done, you can follow the normal setup instructions (run `npm install`, configure the backend, etc.).\n",
  "apphosting.yaml": "# Settings to manage and configure a Firebase App Hosting backend.\n# https://firebase.google.com/docs/app-hosting/configure\n\nrunConfig:\n  # Increase this value if you'd like to automatically spin up\n  # more instances in response to increased traffic.\n  maxInstances: 1\n",
  "backend/.env": "",
  "backend/README.md": "# Royal-Fernet Backend\n\nThis directory contains the Python Flask backend for the Royal-Fernet application. It provides the API that the Next.js frontend consumes.\n\n## Setup Instructions\n\n### Prerequisites\n\n1.  **Python:** Make sure you have Python 3.8+ installed. You can check with `python --version`.\n2.  **MySQL:** You need a running MySQL server.\n\n### Installation\n\n1.  **Navigate to this directory:**\n    ```bash\n    cd backend\n    ```\n\n2.  **Create a virtual environment (recommended):**\n    ```bash\n    python -m venv venv\n    source venv/bin/activate  # On Windows, use `venv\\Scripts\\activate`\n    ```\n\n3.  **Install dependencies:**\n    ```bash\n    pip install -r requirements.txt\n    ```\n\n4.  **Configure Environment Variables:**\n    Open the `.env` file in this directory. Set your MySQL `DB_USER` (usually `root`) and `DB_PASSWORD`.\n\n5.  **Initialize the Database:**\n    Run the following command **once** to create the `royal` database and all the necessary tables.\n    ```bash\n    python init_db.py\n    ```\n    This will print a success message if everything is set up correctly.\n\n### Running the Server\n\nTo start the Flask API server, run:\n\n```bash\nflask --app app run --port 5000\n```\n\nThe server will now be running at `http://127.0.0.1:5000`. The Next.js frontend is already configured to proxy requests to this address.\n",
  "backend/app.py": "import os\nimport uuid\nimport json\nimport pymysql\nfrom dotenv import load_dotenv\nfrom flask import Flask, request, jsonify\nfrom flask_cors import CORS\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\n# --- App Initialization ---\nload_dotenv()\napp = Flask(__name__)\n# Allow CORS for development (from Next.js running on a different port)\nCORS(app)\n\n# --- Database Connection Helper ---\ndef get_db_connection():\n    try:\n        connection = pymysql.connect(\n            host=os.getenv('DB_HOST'),\n            user=os.getenv('DB_USER'),\n            password=os.getenv('DB_PASSWORD'),\n            database=os.getenv('DB_NAME'),\n            charset='utf8mb4',\n            cursorclass=pymysql.cursors.DictCursor\n        )\n        return connection\n    except pymysql.MySQLError as e:\n        # In a real app, you'd have more robust error logging\n        print(f\"Error connecting to MySQL: {e}\")\n        return None\n\n# --- API Routes ---\n\n@app.route('/api/register', methods=['POST'])\ndef register_user():\n    data = request.get_json()\n    name = data.get('name')\n    email = data.get('email')\n    password = data.get('password')\n\n    if not all([name, email, password]):\n        return jsonify({'error': 'Missing required fields'}), 400\n\n    hashed_password = generate_password_hash(password)\n    \n    conn = get_db_connection()\n    if not conn: return jsonify({'error': 'Database connection failed'}), 500\n    try:\n        with conn.cursor() as cursor:\n            sql = \"INSERT INTO users (name, email, password_hash, role) VALUES (%s, %s, %s, %s)\"\n            cursor.execute(sql, (name, email, hashed_password, 'user'))\n        conn.commit()\n        return jsonify({'message': 'User registered successfully'}), 201\n    except pymysql.IntegrityError:\n        return jsonify({'error': 'Email already exists'}), 409\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n    finally:\n        conn.close()\n\n@app.route('/api/login', methods=['POST'])\ndef login_user():\n    data = request.get_json()\n    email = data.get('email')\n    password = data.get('password')\n\n    if not email or not password:\n        return jsonify({'error': 'Email and password are required'}), 400\n\n    conn = get_db_connection()\n    if not conn: return jsonify({'error': 'Database connection failed'}), 500\n    try:\n        with conn.cursor() as cursor:\n            sql = \"SELECT * FROM users WHERE email = %s AND role = 'admin'\"\n            cursor.execute(sql, (email,))\n            user = cursor.fetchone()\n\n            if user and check_password_hash(user['password_hash'], password):\n                # In a real app, you would return a JWT token here\n                return jsonify({'message': 'Login successful', 'user': {'name': user['name'], 'email': user['email']}}), 200\n            else:\n                return jsonify({'error': 'Invalid credentials or not an admin'}), 401\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n    finally:\n        conn.close()\n\n@app.route('/api/products', methods=['GET', 'POST'])\ndef handle_products():\n    conn = get_db_connection()\n    if not conn: return jsonify({'error': 'Database connection failed'}), 500\n    try:\n        if request.method == 'POST':\n            data = request.get_json()\n            product = {\n                'id': str(uuid.uuid4()),\n                'name': data.get('name'),\n                'description': data.get('description'),\n                'category': data.get('category'),\n                'price': data.get('price'),\n                'discount': data.get('discount', 0),\n                'images': json.dumps(data.get('images', [])), # Store as JSON string\n                'is_featured': data.get('isFeatured', False)\n            }\n            with conn.cursor() as cursor:\n                sql = \"\"\"INSERT INTO products (id, name, description, category, price, discount, images, is_featured) \n                         VALUES (%s, %s, %s, %s, %s, %s, %s, %s)\"\"\"\n                cursor.execute(sql, tuple(product.values()))\n            conn.commit()\n            return jsonify(product), 201\n        \n        # --- GET request ---\n        query = request.args.get('q')\n        with conn.cursor() as cursor:\n            if query:\n                sql = \"SELECT * FROM products WHERE name LIKE %s OR category LIKE %s\"\n                search_term = f\"%{query}%\"\n                cursor.execute(sql, (search_term, search_term))\n            else:\n                cursor.execute(\"SELECT * FROM products\")\n            products = cursor.fetchall()\n            # Decode JSON string for images\n            for product in products:\n                if 'images' in product and isinstance(product['images'], str):\n                    product['images'] = json.loads(product['images'])\n            return jsonify(products)\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n    finally:\n        conn.close()\n\n\n@app.route('/api/products/<string:product_id>', methods=['GET', 'PUT', 'DELETE'])\ndef handle_product(product_id):\n    conn = get_db_connection()\n    if not conn: return jsonify({'error': 'Database connection failed'}), 500\n    try:\n        with conn.cursor() as cursor:\n            if request.method == 'GET':\n                cursor.execute(\"SELECT * FROM products WHERE id = %s\", (product_id,))\n                product = cursor.fetchone()\n                if product:\n                    if 'images' in product and isinstance(product['images'], str):\n                        product['images'] = json.loads(product['images'])\n                    return jsonify(product)\n                return jsonify({'error': 'Product not found'}), 404\n\n            elif request.method == 'PUT':\n                data = request.get_json()\n                sql = \"\"\"UPDATE products SET name=%s, description=%s, category=%s, price=%s, discount=%s, images=%s, is_featured=%s\n                         WHERE id=%s\"\"\"\n                values = (\n                    data.get('name'), data.get('description'), data.get('category'),\n                    data.get('price'), data.get('discount', 0), json.dumps(data.get('images', [])),\n                    data.get('isFeatured', False), product_id\n                )\n                rows_affected = cursor.execute(sql, values)\n                if rows_affected == 0:\n                    return jsonify({'error': 'Product not found or no changes made'}), 404\n                conn.commit()\n                return jsonify({'message': 'Product updated successfully'}), 200\n\n            elif request.method == 'DELETE':\n                rows_affected = cursor.execute(\"DELETE FROM products WHERE id = %s\", (product_id,))\n                if rows_affected == 0:\n                    return jsonify({'error': 'Product not found'}), 404\n                conn.commit()\n                return jsonify({'message': 'Product deleted'}), 200\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n    finally:\n        conn.close()\n\n@app.route('/api/admins', methods=['GET', 'POST'])\ndef handle_admins():\n    conn = get_db_connection()\n    if not conn: return jsonify({'error': 'Database connection failed'}), 500\n    try:\n        with conn.cursor() as cursor:\n            if request.method == 'POST':\n                data = request.get_json()\n                hashed_password = generate_password_hash(data['password'])\n                sql = \"INSERT INTO users (name, email, password_hash, role) VALUES (%s, %s, %s, 'admin')\"\n                cursor.execute(sql, (data['name'], data['email'], hashed_password))\n                conn.commit()\n                # Don't return password hash\n                return jsonify({'name': data['name'], 'email': data['email']}), 201\n\n            # --- GET request ---\n            query = request.args.get('q')\n            sql = \"SELECT id, name, email FROM users WHERE role = 'admin'\"\n            params = []\n            if query:\n                sql += \" AND (name LIKE %s OR email LIKE %s)\"\n                search_term = f\"%{query}%\"\n                params.extend([search_term, search_term])\n            \n            cursor.execute(sql, params)\n            admins = cursor.fetchall()\n            return jsonify(admins)\n    except pymysql.IntegrityError:\n        return jsonify({'error': 'Admin with that email already exists'}), 409\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n    finally:\n        conn.close()\n\n@app.route('/api/settings', methods=['GET', 'POST'])\ndef handle_settings():\n    conn = get_db_connection()\n    if not conn: return jsonify({'error': 'Database connection failed'}), 500\n    try:\n        with conn.cursor() as cursor:\n            if request.method == 'POST':\n                data = request.get_json()\n                sql = \"\"\"INSERT INTO settings (id, title, address, hours, mainImageUrl, mapImageUrl, \n                                            phone, contactEmail, twitterUrl, instagramUrl, facebookUrl)\n                         VALUES (1, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n                         ON DUPLICATE KEY UPDATE\n                         title=VALUES(title), address=VALUES(address), hours=VALUES(hours), \n                         mainImageUrl=VALUES(mainImageUrl), mapImageUrl=VALUES(mapImageUrl),\n                         phone=VALUES(phone), contactEmail=VALUES(contactEmail), twitterUrl=VALUES(twitterUrl),\n                         instagramUrl=VALUES(instagramUrl), facebookUrl=VALUES(facebookUrl)\"\"\"\n                values = (\n                    data.get('title'), data.get('address'), data.get('hours'), \n                    data.get('mainImageUrl'), data.get('mapImageUrl'),\n                    data.get('phone'), data.get('contactEmail'), data.get('twitterUrl'),\n                    data.get('instagramUrl'), data.get('facebookUrl')\n                )\n                cursor.execute(sql, values)\n                conn.commit()\n                return jsonify(data), 200\n\n            # --- GET request ---\n            cursor.execute(\"\"\"SELECT title, address, hours, mainImageUrl, mapImageUrl, phone, \n                                     contactEmail, twitterUrl, instagramUrl, facebookUrl \n                              FROM settings WHERE id = 1\"\"\")\n            settings = cursor.fetchone()\n            if settings:\n                return jsonify(settings)\n            return jsonify({}), 404 # Return empty object if no settings found\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n    finally:\n        conn.close()\n\n@app.route('/api/notifications', methods=['POST'])\ndef create_notification():\n    data = request.get_json()\n    conn = get_db_connection()\n    if not conn: return jsonify({'error': 'Database connection failed'}), 500\n    try:\n        with conn.cursor() as cursor:\n            sql = \"INSERT INTO notifications (message, imageUrl, linkUrl) VALUES (%s, %s, %s)\"\n            cursor.execute(sql, (data.get('message'), data.get('imageUrl'), data.get('linkUrl')))\n            conn.commit()\n            return jsonify({'message': 'Notification created'}), 201\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n    finally:\n        conn.close()\n\n\n@app.route('/api/notifications/latest', methods=['GET'])\ndef get_latest_notification():\n    conn = get_db_connection()\n    if not conn: return jsonify({'error': 'Database connection failed'}), 500\n    try:\n        with conn.cursor() as cursor:\n            cursor.execute(\"SELECT * FROM notifications ORDER BY created_at DESC LIMIT 1\")\n            notification = cursor.fetchone()\n            if notification:\n                return jsonify(notification)\n            return jsonify({'error': 'No notifications found'}), 404\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n    finally:\n        conn.close()\n\n# --- Main Execution ---\nif __name__ == '__main__':\n    # Use debug=True for development, which enables auto-reloading\n    app.run(debug=True, port=5000)\n",
  "backend/init_db.py": "import os\nimport pymysql\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n# --- Database Connection ---\ntry:\n    # Connect without specifying the database first to create it if it doesn't exist\n    connection = pymysql.connect(\n        host=os.getenv('DB_HOST'),\n        user=os.getenv('DB_USER'),\n        password=os.getenv('DB_PASSWORD'),\n        charset='utf8mb4',\n        cursorclass=pymysql.cursors.DictCursor\n    )\n    print(\"✅ Successfully connected to MySQL server.\")\nexcept pymysql.MySQLError as e:\n    print(f\"❌ Error connecting to MySQL: {e}\")\n    exit(1)\n\ntry:\n    with connection.cursor() as cursor:\n        db_name = os.getenv('DB_NAME')\n        cursor.execute(f\"CREATE DATABASE IF NOT EXISTS `{db_name}` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci\")\n        cursor.execute(f\"USE `{db_name}`\")\n        print(f\"✅ Database '{db_name}' is ready.\")\n\n        # --- Table Creation ---\n\n        # Users Table (for admins and general users)\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS users (\n                id INT AUTO_INCREMENT PRIMARY KEY,\n                name VARCHAR(255) NOT NULL,\n                email VARCHAR(255) NOT NULL UNIQUE,\n                password_hash VARCHAR(255) NOT NULL,\n                role ENUM('admin', 'user') NOT NULL DEFAULT 'user',\n                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n            )\n        \"\"\")\n        print(\"✅ Table 'users' created or already exists.\")\n\n        # Products Table\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS products (\n                id VARCHAR(36) PRIMARY KEY,\n                name VARCHAR(255) NOT NULL,\n                description TEXT NOT NULL,\n                category VARCHAR(255) NOT NULL,\n                price DECIMAL(10, 2) NOT NULL,\n                discount INT DEFAULT 0,\n                images JSON NOT NULL,\n                is_featured BOOLEAN DEFAULT FALSE,\n                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n            )\n        \"\"\")\n        print(\"✅ Table 'products' created or already exists.\")\n\n        # Settings Table (single row)\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS settings (\n                id INT PRIMARY KEY DEFAULT 1,\n                title VARCHAR(255),\n                address VARCHAR(255),\n                hours VARCHAR(255),\n                mainImageUrl VARCHAR(2048),\n                mapImageUrl VARCHAR(2048),\n                phone VARCHAR(255),\n                contactEmail VARCHAR(255),\n                twitterUrl VARCHAR(2048),\n                instagramUrl VARCHAR(2048),\n                facebookUrl VARCHAR(2048),\n                CONSTRAINT single_row CHECK (id = 1)\n            )\n        \"\"\")\n        print(\"✅ Table 'settings' created or already exists.\")\n\n        # Notifications Table\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS notifications (\n                id INT AUTO_INCREMENT PRIMARY KEY,\n                message TEXT NOT NULL,\n                imageUrl VARCHAR(2048),\n                linkUrl VARCHAR(2048),\n                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n            )\n        \"\"\")\n        print(\"✅ Table 'notifications' created or already exists.\")\n\n    connection.commit()\n    print(\"\\n🎉 Database initialization complete!\")\n\nfinally:\n    connection.close()\n",
  "backend/requirements.txt": "Flask>=2.0\nFlask-Cors>=3.0\nPyMySQL>=1.0\npython-dotenv>=0.20\nWerkzeug>=2.0\n",
  "components.json": "{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"default\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.ts\",\n    \"css\": \"src/app/globals.css\",\n    \"baseColor\": \"neutral\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  },\n  \"iconLibrary\": \"lucide\"\n}",
  "next.config.ts": "/**\n * @fileoverview Archivo de configuración para Next.js.\n * Permite personalizar el comportamiento del framework, como la gestión de imágenes,\n * las redirecciones, las variables de entorno y las optimizaciones de compilación.\n * En este caso, se configuran las reescrituras para el proxy de la API y se ignoran\n * errores de TypeScript y ESLint durante la compilación.\n */\nimport type {NextConfig} from 'next';\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'placehold.co',\n        port: '',\n        pathname: '/**',\n      },\n    ],\n  },\n  async rewrites() {\n    return [\n      {\n        source: '/api/:path*',\n        destination: 'http://127.0.0.1:5000/:path*',\n      },\n    ]\n  },\n};\n\nexport default nextConfig;\n",
  "package.json": "{\n  \"name\": \"nextn\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev --turbopack -p 9002\",\n    \"genkit:dev\": \"genkit start -- tsx src/ai/dev.ts\",\n    \"genkit:watch\": \"genkit start -- tsx --watch src/ai/dev.ts\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"typecheck\": \"tsc --noEmit\"\n  },\n  \"dependencies\": {\n    \"@genkit-ai/googleai\": \"^1.13.0\",\n    \"@genkit-ai/next\": \"^1.13.0\",\n    \"@hookform/resolvers\": \"^4.1.3\",\n    \"@radix-ui/react-accordion\": \"^1.2.3\",\n    \"@radix-ui/react-alert-dialog\": \"^1.1.6\",\n    \"@radix-ui/react-avatar\": \"^1.1.3\",\n    \"@radix-ui/react-checkbox\": \"^1.1.4\",\n    \"@radix-ui/react-collapsible\": \"^1.1.11\",\n    \"@radix-ui/react-dialog\": \"^1.1.6\",\n    \"@radix-ui/react-dropdown-menu\": \"^2.1.6\",\n    \"@radix-ui/react-label\": \"^2.1.2\",\n    \"@radix-ui/react-menubar\": \"^1.1.6\",\n    \"@radix-ui/react-popover\": \"^1.1.6\",\n    \"@radix-ui/react-progress\": \"^1.1.2\",\n    \"@radix-ui/react-radio-group\": \"^1.2.3\",\n    \"@radix-ui/react-scroll-area\": \"^1.2.3\",\n    \"@radix-ui/react-select\": \"^2.1.6\",\n    \"@radix-ui/react-separator\": \"^1.1.2\",\n    \"@radix-ui/react-slider\": \"^1.2.3\",\n    \"@radix-ui/react-slot\": \"^1.2.3\",\n    \"@radix-ui/react-switch\": \"^1.1.3\",\n    \"@radix-ui/react-tabs\": \"^1.1.3\",\n    \"@radix-ui/react-toast\": \"^1.2.6\",\n    \"@radix-ui/react-tooltip\": \"^1.1.8\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"date-fns\": \"^3.6.0\",\n    \"dotenv\": \"^16.5.0\",\n    \"embla-carousel-react\": \"^8.6.0\",\n    \"firebase\": \"^11.9.1\",\n    \"genkit\": \"^1.13.0\",\n    \"lucide-react\": \"^0.475.0\",\n    \"next\": \"15.3.3\",\n    \"next-themes\": \"^0.3.0\",\n    \"patch-package\": \"^8.0.0\",\n    \"react\": \"^18.3.1\",\n    \"react-day-picker\": \"^8.10.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-hook-form\": \"^7.54.2\",\n    \"recharts\": \"^2.15.1\",\n    \"tailwind-merge\": \"^3.0.1\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"zod\": \"^3.24.2\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^18\",\n    \"@types/react-dom\": \"^18\",\n    \"genkit-cli\": \"^1.13.0\",\n    \"postcss\": \"^8\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"typescript\": \"^5\"\n  }\n}",
  "src/ai/dev.ts": "/**\n * @fileoverview Punto de entrada para el entorno de desarrollo de Genkit.\n * Este archivo se utiliza para registrar e importar los flujos de IA\n * para que puedan ser ejecutados y depurados localmente con la herramienta\n * de línea de comandos de Genkit.\n */\n// Flows will be imported for their side effects in this file.\nimport './flows/customer-service-flow';\nimport './flows/invoice-generator-flow';\n",
  "src/ai/flows/customer-service-flow.ts": "'use server';\n/**\n * @fileOverview Un agente de IA para el servicio de atención al cliente.\n *\n * - customerService - Una función que maneja las consultas de los clientes.\n * - CustomerServiceInput - El tipo de entrada para la función.\n * - CustomerServiceOutput - El tipo de retorno para la función.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst CustomerServiceInputSchema = z.string().describe('The user query to the customer service bot.');\nexport type CustomerServiceInput = z.infer<typeof CustomerServiceInputSchema>;\n\nconst CustomerServiceOutputSchema = z.string().describe('The response from the customer service bot.');\nexport type CustomerServiceOutput = z.infer<typeof CustomerServiceOutputSchema>;\n\nexport async function customerService(input: CustomerServiceInput): Promise<CustomerServiceOutput> {\n  return customerServiceFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'customerServicePrompt',\n  input: {schema: CustomerServiceInputSchema},\n  output: {schema: CustomerServiceOutputSchema},\n  prompt: `You are a friendly and helpful customer service assistant for Royal-Fernet, a luxury watch store.\n\nYour goal is to assist users with their questions about products, orders, and shipping. Be concise and professional.\n\nUser question: {{{prompt}}}`, \n});\n\nconst customerServiceFlow = ai.defineFlow(\n  {\n    name: 'customerServiceFlow',\n    inputSchema: CustomerServiceInputSchema,\n    outputSchema: CustomerServiceOutputSchema,\n  },\n  async (input) => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n",
  "src/ai/flows/invoice-generator-flow.ts": "'use server';\n/**\n * @fileOverview Un generador de facturas mediante IA.\n *\n * - generateInvoice - Una función que genera una factura en formato HTML.\n * - GenerateInvoiceInput - El tipo de entrada para la función.\n * - GenerateInvoiceOutput - El tipo de retorno para la función.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateInvoiceInputSchema = z.object({\n  customerName: z.string().describe('El nombre del cliente.'),\n  productName: z.string().describe('El nombre del producto comprado.'),\n  quantity: z.number().describe('La cantidad de productos comprados.'),\n  price: z.number().describe('El precio unitario del producto.'),\n  invoiceNumber: z.string().describe('El número de factura único.'),\n  date: z.string().describe('La fecha de la factura (YYYY-MM-DD).'),\n});\nexport type GenerateInvoiceInput = z.infer<typeof GenerateInvoiceInputSchema>;\n\nconst GenerateInvoiceOutputSchema = z.object({\n    invoiceHtml: z.string().describe('La factura completa en formato HTML.'),\n});\nexport type GenerateInvoiceOutput = z.infer<typeof GenerateInvoiceOutputSchema>;\n\n\nexport async function generateInvoice(input: GenerateInvoiceInput): Promise<GenerateInvoiceOutput> {\n  return invoiceGeneratorFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'invoiceGeneratorPrompt',\n  input: {schema: GenerateInvoiceInputSchema},\n  output: {schema: GenerateInvoiceOutputSchema},\n  prompt: `\n    You are an expert invoice designer. Create a professional and clean HTML invoice based on the following details.\n    The design should be modern, using inline CSS for styling. Do not include any javascript or external stylesheets.\n    The total should be calculated as quantity * price. The currency is USD.\n\n    Details:\n    - Customer Name: {{{customerName}}}\n    - Product: {{{productName}}}\n    - Quantity: {{{quantity}}}\n    - Unit Price: \\${{{price}}}\n    - Invoice Number: {{{invoiceNumber}}}\n    - Date: {{{date}}}\n\n    Generate the complete HTML for the invoice.\n  `,\n});\n\nconst invoiceGeneratorFlow = ai.defineFlow(\n  {\n    name: 'invoiceGeneratorFlow',\n    inputSchema: GenerateInvoiceInputSchema,\n    outputSchema: GenerateInvoiceOutputSchema,\n  },\n  async (input) => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n",
  "src/ai/genkit.ts": "/**\n * @fileoverview Archivo de inicialización y configuración central para Genkit.\n * Aquí se configura el plugin de Google AI y se define el modelo de lenguaje\n * por defecto que se utilizará en los flujos de la aplicación.\n */\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n",
  "src/app/admin/dashboard/page.tsx": "'use client';\n/**\n * @fileoverview Página del panel de control de administración.\n * Muestra una tabla con los productos existentes y otra con los administradores.\n * Permite realizar acciones como agregar, editar o eliminar productos, y añadir nuevos admins.\n * Implementa modales para la gestión de productos y diálogos de confirmación.\n * Incluye un generador de facturas y un panel para enviar notificaciones.\n */\nimport { useEffect, useState } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { fetchProducts, fetchAdmins, fetchStoreSettings } from \"@/lib/data\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\";\nimport {\n    Dialog,\n    DialogContent,\n    DialogDescription,\n    DialogHeader,\n    DialogTitle,\n    DialogTrigger,\n    DialogFooter,\n    DialogClose,\n} from \"@/components/ui/dialog\";\nimport {\n    AlertDialog,\n    AlertDialogAction,\n    AlertDialogCancel,\n    AlertDialogContent,\n    AlertDialogDescription,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogTitle,\n    AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport {\n    Tabs,\n    TabsContent,\n    TabsList,\n    TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { PlusCircle, Edit, Trash2, Search, FileText, BellRing, Settings } from \"lucide-react\";\nimport Image from \"next/image\";\nimport Link from 'next/link';\nimport { Product, Admin, StoreSettings } from \"@/lib/definitions\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { addProduct, updateProduct, deleteProduct, addAdmin, generateInvoiceAction, sendNotificationAction, updateStoreSettings } from \"@/lib/actions\";\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n    Select,\n    SelectContent,\n    SelectItem,\n    SelectTrigger,\n    SelectValue,\n} from \"@/components/ui/select\";\nimport {\n    Avatar,\n    AvatarFallback,\n    AvatarImage,\n} from \"@/components/ui/avatar\";\n\n// Form component for adding and editing products\nfunction ProductForm({ product, onFormSubmit }: { product?: Product, onFormSubmit: () => void }) {\n    const action = product ? updateProduct.bind(null, product.id) : addProduct;\n\n    return (\n        <form action={action} onSubmit={onFormSubmit} className=\"grid gap-4 py-4\">\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"name\" className=\"text-right\">Nombre</Label>\n                <Input id=\"name\" name=\"name\" defaultValue={product?.name} className=\"col-span-3\" required />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"description\" className=\"text-right\">Descripción</Label>\n                <Textarea id=\"description\" name=\"description\" defaultValue={product?.description} className=\"col-span-3\" required />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"category\" className=\"text-right\">Categoría</Label>\n                <Input id=\"category\" name=\"category\" defaultValue={product?.category} className=\"col-span-3\" required />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"price\" className=\"text-right\">Precio</Label>\n                <Input id=\"price\" name=\"price\" type=\"number\" step=\"0.01\" defaultValue={product?.price} className=\"col-span-3\" required />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"discount\" className=\"text-right\">Descuento (%)</Label>\n                <Input id=\"discount\" name=\"discount\" type=\"number\" defaultValue={product?.discount} className=\"col-span-3\" />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"image1\" className=\"text-right\">Imagen Principal</Label>\n                <Input id=\"image1\" name=\"image1\" placeholder=\"URL de la imagen principal\" defaultValue={product?.images?.[0] || ''} className=\"col-span-3\" required />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"image2\" className=\"text-right\">Imagen 2</Label>\n                <Input id=\"image2\" name=\"image2\" placeholder=\"URL de la imagen opcional\" defaultValue={product?.images?.[1] || ''} className=\"col-span-3\" />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"image3\" className=\"text-right\">Imagen 3</Label>\n                <Input id=\"image3\" name=\"image3\" placeholder=\"URL de la imagen opcional\" defaultValue={product?.images?.[2] || ''} className=\"col-span-3\" />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"image4\" className=\"text-right\">Imagen 4</Label>\n                <Input id=\"image4\" name=\"image4\" placeholder=\"URL de la imagen opcional\" defaultValue={product?.images?.[3] || ''} className=\"col-span-3\" />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"isFeatured\" className=\"text-right\">Destacado</Label>\n                <Checkbox id=\"isFeatured\" name=\"isFeatured\" defaultChecked={product?.isFeatured} className=\"col-span-3 justify-self-start\" />\n            </div>\n            <DialogFooter>\n                <DialogClose asChild>\n                    <Button type=\"button\" variant=\"secondary\">Cancelar</Button>\n                </DialogClose>\n                <Button type=\"submit\">{product ? \"Guardar Cambios\" : \"Añadir Producto\"}</Button>\n            </DialogFooter>\n        </form>\n    );\n}\n\n// Form component for adding admins\nfunction AdminForm({ onFormSubmit }: { onFormSubmit: () => void }) {\n    return (\n        <form action={addAdmin} onSubmit={onFormSubmit} className=\"grid gap-4 py-4\">\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"name\" className=\"text-right\">Nombre</Label>\n                <Input id=\"name\" name=\"name\" className=\"col-span-3\" required />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"email\" className=\"text-right\">Email</Label>\n                <Input id=\"email\" name=\"email\" type=\"email\" className=\"col-span-3\" required />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"password\" className=\"text-right\">Contraseña</Label>\n                <Input id=\"password\" name=\"password\" type=\"password\" className=\"col-span-3\" required />\n            </div>\n            <DialogFooter>\n                <DialogClose asChild>\n                    <Button type=\"button\" variant=\"secondary\">Cancelar</Button>\n                </DialogClose>\n                <Button type=\"submit\">Añadir Admin</Button>\n            </DialogFooter>\n        </form>\n    );\n}\n\n// Form component for store settings\nfunction StoreSettingsForm({ settings }: { settings: StoreSettings | null }) {\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    \n    return (\n        <form action={updateStoreSettings} onSubmit={() => setIsSubmitting(true)} className=\"space-y-6\">\n            \n            <Card>\n                <CardHeader>\n                    <CardTitle>Contenido de la Página de Inicio</CardTitle>\n                    <CardDescription>Ajusta el contenido principal que ven los usuarios al entrar al sitio.</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                    <div className=\"grid gap-2\">\n                        <Label htmlFor=\"storeTitle\">Título de Bienvenida</Label>\n                        <Input id=\"storeTitle\" name=\"storeTitle\" defaultValue={settings?.title} required />\n                        <p className=\"text-sm text-muted-foreground\">El título principal que se muestra en la sección de bienvenida de la página de inicio.</p>\n                    </div>\n                     <div className=\"grid gap-2\">\n                        <Label htmlFor=\"storeMainImage\">URL de la Imagen Principal</Label>\n                        <Input id=\"storeMainImage\" name=\"storeMainImage\" defaultValue={settings?.mainImageUrl} required />\n                         <p className=\"text-sm text-muted-foreground\">La imagen de fondo para la sección de bienvenida.</p>\n                    </div>\n                </CardContent>\n            </Card>\n\n            <Card>\n                 <CardHeader>\n                    <CardTitle>Información de la Tienda Física</CardTitle>\n                    <CardDescription>Actualiza los detalles de contacto y ubicación que se muestran en el sitio.</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                    <div className=\"grid gap-2\">\n                        <Label htmlFor=\"storeAddress\">Dirección</Label>\n                        <Input id=\"storeAddress\" name=\"storeAddress\" defaultValue={settings?.address} required />\n                        <p className=\"text-sm text-muted-foreground\">La dirección física de la tienda que se muestra en la página de inicio.</p>\n                    </div>\n                     <div className=\"grid gap-2\">\n                        <Label htmlFor=\"storeHours\">Horario de Apertura</Label>\n                        <Input id=\"storeHours\" name=\"storeHours\" defaultValue={settings?.hours} required />\n                         <p className=\"text-sm text-muted-foreground\">El horario de atención al público.</p>\n                    </div>\n                    <div className=\"grid gap-2\">\n                        <Label htmlFor=\"storeMapImage\">URL de la Imagen del Mapa</Label>\n                        <Input id=\"storeMapImage\" name=\"storeMapImage\" defaultValue={settings?.mapImageUrl} required />\n                         <p className=\"text-sm text-muted-foreground\">URL de una imagen o captura del mapa para mostrar la ubicación.</p>\n                    </div>\n                     <div className=\"grid gap-2\">\n                        <Label htmlFor=\"phone\">Teléfono de Contacto</Label>\n                        <Input id=\"phone\" name=\"phone\" defaultValue={settings?.phone} />\n                         <p className=\"text-sm text-muted-foreground\">Número de teléfono que se mostrará en el pie de página (opcional).</p>\n                    </div>\n                     <div className=\"grid gap-2\">\n                        <Label htmlFor=\"contactEmail\">Email de Contacto</Label>\n                        <Input id=\"contactEmail\" name=\"contactEmail\" type=\"email\" defaultValue={settings?.contactEmail} />\n                         <p className=\"text-sm text-muted-foreground\">Dirección de correo electrónico de contacto (opcional).</p>\n                    </div>\n                </CardContent>\n            </Card>\n\n            <Card>\n                <CardHeader>\n                    <CardTitle>Redes Sociales</CardTitle>\n                    <CardDescription>Configura los enlaces a los perfiles de redes sociales que aparecen en el pie de página.</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                    <div className=\"grid gap-2\">\n                        <Label htmlFor=\"twitterUrl\">URL de Twitter (X)</Label>\n                        <Input id=\"twitterUrl\" name=\"twitterUrl\" defaultValue={settings?.twitterUrl} />\n                    </div>\n                     <div className=\"grid gap-2\">\n                        <Label htmlFor=\"instagramUrl\">URL de Instagram</Label>\n                        <Input id=\"instagramUrl\" name=\"instagramUrl\" defaultValue={settings?.instagramUrl} />\n                    </div>\n                    <div className=\"grid gap-2\">\n                        <Label htmlFor=\"facebookUrl\">URL de Facebook</Label>\n                        <Input id=\"facebookUrl\" name=\"facebookUrl\" defaultValue={settings?.facebookUrl} />\n                    </div>\n                </CardContent>\n            </Card>\n\n            <div className=\"flex justify-end\">\n                <Button type=\"submit\" disabled={isSubmitting}>{isSubmitting ? 'Guardando...' : 'Guardar Cambios'}</Button>\n            </div>\n        </form>\n    );\n}\n\n// Main page component\nexport default function AdminDashboardPage() {\n    const [products, setProducts] = useState<Product[]>([]);\n    const [admins, setAdmins] = useState<Admin[]>([]);\n    const [storeSettings, setStoreSettings] = useState<StoreSettings | null>(null);\n    const [loading, setLoading] = useState(true);\n    const [isProductDialogOpen, setIsProductDialogOpen] = useState(false);\n    const [isAdminDialogOpen, setIsAdminDialogOpen] = useState(false);\n    const [generatedInvoiceHtml, setGeneratedInvoiceHtml] = useState<string | null>(null);\n    const [isInvoiceDialogOpen, setInvoiceDialog] = useState(false);\n    const [isGenerating, setIsGenerating] = useState(false);\n    const [isSendingNotification, setIsSendingNotification] = useState(false);\n    const [productCurrentPage, setProductCurrentPage] = useState(1);\n    const { toast } = useToast();\n\n    const router = useRouter();\n    const searchParams = useSearchParams();\n    const productQuery = searchParams.get('q') || '';\n    const adminQuery = searchParams.get('admin_q') || '';\n    \n    useEffect(() => {\n        async function loadData() {\n            setLoading(true);\n            try {\n                const [productData, adminData, settingsData] = await Promise.all([\n                    fetchProducts(productQuery),\n                    fetchAdmins(adminQuery),\n                    fetchStoreSettings()\n                ]);\n                setProducts(productData);\n                setAdmins(adminData);\n                setStoreSettings(settingsData);\n            } catch (error) {\n                console.error(\"Failed to load dashboard data:\", error);\n                toast({\n                    title: \"Error de Carga\",\n                    description: \"No se pudieron cargar los datos del panel. Asegúrate de que el backend esté funcionando.\",\n                    variant: 'destructive'\n                });\n            } finally {\n                setLoading(false);\n                setProductCurrentPage(1);\n            }\n        }\n        loadData();\n    }, [productQuery, adminQuery, toast]);\n    \n    const handleSearch = (term: string, type: 'product' | 'admin') => {\n        const params = new URLSearchParams(searchParams.toString());\n        if (term) {\n            params.set(type === 'product' ? 'q' : 'admin_q', term);\n        } else {\n            params.delete(type === 'product' ? 'q' : 'admin_q');\n        }\n        router.replace(`/admin/dashboard?${params.toString()}`);\n    };\n\n    const handleInvoiceSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        setIsGenerating(true);\n        const formData = new FormData(event.currentTarget);\n        const result = await generateInvoiceAction(formData);\n        \n        if (result.success && result.html) {\n            setGeneratedInvoiceHtml(result.html);\n            setInvoiceDialog(true);\n        } else {\n            toast({\n                title: \"Error de Factura\",\n                description: result.error || 'Ocurrió un error desconocido.',\n                variant: 'destructive'\n            });\n        }\n        setIsGenerating(false);\n    };\n\n    const handleNotificationSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        setIsSendingNotification(true);\n        const formData = new FormData(event.currentTarget);\n        const result = await sendNotificationAction(formData);\n\n        if (result.success) {\n            toast({ title: \"Éxito\", description: \"Notificación enviada correctamente.\" });\n            (event.currentTarget as HTMLFormElement).reset();\n        } else {\n            toast({ title: \"Error\", description: result.error, variant: \"destructive\" });\n        }\n        setIsSendingNotification(false);\n    };\n\n    const productsPerPage = 10;\n    const indexOfLastProduct = productCurrentPage * productsPerPage;\n    const indexOfFirstProduct = indexOfLastProduct - productsPerPage;\n    const currentProducts = products.slice(indexOfFirstProduct, indexOfLastProduct);\n    const totalProductPages = Math.ceil(products.length / productsPerPage);\n\n    if (loading) {\n        return <div className=\"container mx-auto py-12 px-4 space-y-12\"><Skeleton className=\"h-96 w-full\" /></div>\n    }\n\n    return (\n        <div className=\"container mx-auto py-12 px-4\">\n            <h1 className=\"text-3xl font-bold font-headline mb-8\">Panel de Administración</h1>\n\n            <Tabs defaultValue=\"products\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-5 mb-6\">\n                    <TabsTrigger value=\"overview\">Resumen</TabsTrigger>\n                    <TabsTrigger value=\"products\">Productos</TabsTrigger>\n                    <TabsTrigger value=\"admins\">Administradores</TabsTrigger>\n                    <TabsTrigger value=\"settings\">Configuración</TabsTrigger>\n                    <TabsTrigger value=\"developers\">Desarrolladores</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"overview\">\n                    <div className=\"grid gap-4 md:grid-cols-2\">\n                        <Card>\n                            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                                <CardTitle className=\"text-sm font-medium\">Enviar Notificación Personalizada</CardTitle>\n                                <BellRing className=\"h-4 w-4 text-muted-foreground\" />\n                            </CardHeader>\n                            <CardContent>\n                                <form onSubmit={handleNotificationSubmit} className=\"flex flex-col gap-4\">\n                                    <div className=\"grid gap-2\">\n                                        <Label htmlFor=\"message\">Mensaje</Label>\n                                        <Textarea id=\"message\" name=\"message\" placeholder=\"¡Anuncia una nueva oferta!\" required />\n                                    </div>\n                                    <div className=\"grid gap-2\">\n                                        <Label htmlFor=\"imageUrl\">URL de la Imagen (Opcional)</Label>\n                                        <Input id=\"imageUrl\" name=\"imageUrl\" placeholder=\"https://example.com/image.png\" />\n                                    </div>\n                                    <div className=\"grid gap-2\">\n                                        <Label htmlFor=\"linkUrl\">URL del Enlace (Opcional)</Label>\n                                        <Input id=\"linkUrl\" name=\"linkUrl\" placeholder=\"https://your-store.com/sale\" />\n                                    </div>\n                                    <Button type=\"submit\" disabled={isSendingNotification} className=\"w-full\">\n                                        {isSendingNotification ? 'Enviando...' : 'Enviar Notificación'}\n                                    </Button>\n                                </form>\n                            </CardContent>\n                        </Card>\n                        <Card>\n                            <CardHeader>\n                                <CardTitle className=\"flex items-center gap-2\"><FileText className=\"h-5 w-5\" /> Generador de Facturas</CardTitle>\n                                <CardDescription>Selecciona un producto para crear una factura de ejemplo usando IA.</CardDescription>\n                            </CardHeader>\n                            <CardContent>\n                                <form onSubmit={handleInvoiceSubmit} className=\"flex flex-col gap-4\">\n                                    <div className=\"grid gap-2\">\n                                        <Label htmlFor=\"customerName\">Cliente</Label>\n                                        <Input id=\"customerName\" name=\"customerName\" placeholder=\"John Doe\" required />\n                                    </div>\n                                    <div className=\"grid gap-2\">\n                                        <Label htmlFor=\"productId\">Producto</Label>\n                                        <Select name=\"productId\" required>\n                                            <SelectTrigger id=\"productId\">\n                                                <SelectValue placeholder=\"Selecciona un producto\" />\n                                            </SelectTrigger>\n                                            <SelectContent>\n                                                {products.map((product) => (\n                                                    <SelectItem key={product.id} value={product.id}>\n                                                        {product.name}\n                                                    </SelectItem>\n                                                ))}\n                                            </SelectContent>\n                                        </Select>\n                                    </div>\n                                    <div className=\"grid gap-2\">\n                                        <Label htmlFor=\"quantity\">Cant.</Label>\n                                        <Input id=\"quantity\" name=\"quantity\" type=\"number\" placeholder=\"1\" required defaultValue=\"1\" />\n                                    </div>\n                                    <Button type=\"submit\" disabled={isGenerating || products.length === 0} className=\"w-full\">\n                                        {isGenerating ? 'Generando...' : 'Generar Factura'}\n                                    </Button>\n                                </form>\n                            </CardContent>\n                        </Card>\n                    </div>\n                </TabsContent>\n\n                <TabsContent value=\"products\">\n                   <Card>\n                        <CardHeader>\n                            <div className=\"flex justify-between items-center\">\n                                <div>\n                                    <CardTitle>Gestión de Productos</CardTitle>\n                                    <CardDescription>Añade, edita y elimina productos de tu tienda.</CardDescription>\n                                </div>\n                                <Dialog open={isProductDialogOpen} onOpenChange={setIsProductDialogOpen}>\n                                    <DialogTrigger asChild>\n                                        <Button>\n                                            <PlusCircle className=\"mr-2 h-4 w-4\" />\n                                            Añadir Producto\n                                        </Button>\n                                    </DialogTrigger>\n                                    <DialogContent className=\"sm:max-w-lg\">\n                                        <DialogHeader>\n                                            <DialogTitle>Añadir Nuevo Producto</DialogTitle>\n                                            <DialogDescription>\n                                                Rellena los detalles del nuevo producto. Haz clic en añadir cuando hayas terminado.\n                                            </DialogDescription>\n                                        </DialogHeader>\n                                        <ProductForm onFormSubmit={() => setIsProductDialogOpen(false)} />\n                                    </DialogContent>\n                                </Dialog>\n                            </div>\n                        </CardHeader>\n                        <CardContent className=\"space-y-4\">\n                            <div className=\"relative\">\n                                <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n                                <Input \n                                    type=\"search\" \n                                    placeholder=\"Buscar productos...\" \n                                    className=\"pl-8\" \n                                    defaultValue={productQuery}\n                                    onChange={(e) => handleSearch(e.target.value, 'product')}\n                                />\n                            </div>\n                            <div className=\"rounded-lg border\">\n                                <Table>\n                                    <TableHeader>\n                                        <TableRow>\n                                            <TableHead className=\"w-[80px]\">Imagen</TableHead>\n                                            <TableHead>Nombre</TableHead>\n                                            <TableHead>Categoría</TableHead>\n                                            <TableHead>Precio</TableHead>\n                                            <TableHead>Destacado</TableHead>\n                                            <TableHead className=\"text-right\">Acciones</TableHead>\n                                        </TableRow>\n                                    </TableHeader>\n                                    <TableBody>\n                                        {currentProducts.map((product) => (\n                                            <TableRow key={product.id}>\n                                                <TableCell>\n                                                    <Image \n                                                        src={product.images[0]}\n                                                        alt={product.name}\n                                                        width={40}\n                                                        height={40}\n                                                        className=\"rounded-md object-cover\"\n                                                    />\n                                                </TableCell>\n                                                <TableCell className=\"font-medium\">{product.name}</TableCell>\n                                                <TableCell>{product.category}</TableCell>\n                                                <TableCell>${product.price.toFixed(2)}</TableCell>\n                                                <TableCell>{product.isFeatured ? 'Sí' : 'No'}</TableCell>\n                                                <TableCell className=\"text-right\">\n                                                    <Dialog>\n                                                        <DialogTrigger asChild>\n                                                            <Button variant=\"ghost\" size=\"icon\">\n                                                                <Edit className=\"h-4 w-4\" />\n                                                                <span className=\"sr-only\">Edit</span>\n                                                            </Button>\n                                                        </DialogTrigger>\n                                                        <DialogContent className=\"sm:max-w-lg\">\n                                                            <DialogHeader>\n                                                                <DialogTitle>Editar Producto</DialogTitle>\n                                                                <DialogDescription>\n                                                                    Realiza cambios en los detalles del producto. Haz clic en guardar cuando hayas terminado.\n                                                                </DialogDescription>\n                                                            </DialogHeader>\n                                                            <ProductForm product={product} onFormSubmit={() => { /* no-op */ }} />\n                                                        </DialogContent>\n                                                    </Dialog>\n                                                    <AlertDialog>\n                                                        <AlertDialogTrigger asChild>\n                                                            <Button variant=\"ghost\" size=\"icon\" className=\"text-destructive hover:text-destructive\">\n                                                                <Trash2 className=\"h-4 w-4\" />\n                                                                <span className=\"sr-only\">Delete</span>\n                                                            </Button>\n                                                        </AlertDialogTrigger>\n                                                        <AlertDialogContent>\n                                                            <AlertDialogHeader>\n                                                                <AlertDialogTitle>¿Estás seguro?</AlertDialogTitle>\n                                                                <AlertDialogDescription>\n                                                                    Esta acción no se puede deshacer. Esto eliminará permanentemente el producto.\n                                                                </AlertDialogDescription>\n                                                            </AlertDialogHeader>\n                                                            <AlertDialogFooter>\n                                                                <AlertDialogCancel>Cancelar</AlertDialogCancel>\n                                                                <form action={deleteProduct.bind(null, product.id)}>\n                                                                    <AlertDialogAction type=\"submit\">Eliminar</AlertDialogAction>\n                                                                </form>\n                                                            </AlertDialogFooter>\n                                                        </AlertDialogContent>\n                                                    </AlertDialog>\n                                                </TableCell>\n                                            </TableRow>\n                                        ))}\n                                    </TableBody>\n                                </Table>\n                            </div>\n                            {totalProductPages > 1 && (\n                                <div className=\"flex items-center justify-end space-x-2 py-4\">\n                                    <Button\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={() => setProductCurrentPage(productCurrentPage - 1)}\n                                        disabled={productCurrentPage === 1}\n                                    >\n                                        Anterior\n                                    </Button>\n                                    <span className=\"text-sm text-muted-foreground\">\n                                        Página {productCurrentPage} de {totalProductPages}\n                                    </span>\n                                    <Button\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={() => setProductCurrentPage(productCurrentPage + 1)}\n                                        disabled={productCurrentPage === totalProductPages}\n                                    >\n                                        Siguiente\n                                    </Button>\n                                </div>\n                            )}\n                        </CardContent>\n                    </Card>\n                </TabsContent>\n\n                <TabsContent value=\"admins\">\n                   <Card>\n                        <CardHeader>\n                            <div className=\"flex justify-between items-center\">\n                                <div>\n                                    <CardTitle>Gestión de Administradores</CardTitle>\n                                    <CardDescription>Añade y gestiona los administradores de la tienda.</CardDescription>\n                                </div>\n                                <Dialog open={isAdminDialogOpen} onOpenChange={setIsAdminDialogOpen}>\n                                    <DialogTrigger asChild>\n                                        <Button>\n                                            <PlusCircle className=\"mr-2 h-4 w-4\" />\n                                            Añadir Admin\n                                        </Button>\n                                    </DialogTrigger>\n                                    <DialogContent className=\"sm:max-w-[425px]\">\n                                        <DialogHeader>\n                                            <DialogTitle>Añadir Nuevo Admin</DialogTitle>\n                                            <DialogDescription>\n                                                Rellena los detalles del nuevo administrador.\n                                            </DialogDescription>\n                                        </DialogHeader>\n                                        <AdminForm onFormSubmit={() => setIsAdminDialogOpen(false)}/>\n                                    </DialogContent>\n                                </Dialog>\n                            </div>\n                        </CardHeader>\n                        <CardContent className=\"space-y-4\">\n                            <div className=\"relative\">\n                                <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n                                <Input \n                                    type=\"search\" \n                                    placeholder=\"Buscar admins por nombre o email...\" \n                                    className=\"pl-8\" \n                                    defaultValue={adminQuery}\n                                    onChange={(e) => handleSearch(e.target.value, 'admin')}\n                                />\n                            </div>\n                            <div className=\"rounded-lg border\">\n                                <Table>\n                                    <TableHeader>\n                                        <TableRow>\n                                            <TableHead>Nombre</TableHead>\n                                            <TableHead>Email</TableHead>\n                                            <TableHead className=\"text-right\">Acciones</TableHead>\n                                        </TableRow>\n                                    </TableHeader>\n                                    <TableBody>\n                                        {admins.map((admin) => (\n                                            <TableRow key={admin.id}>\n                                                <TableCell className=\"font-medium\">{admin.name}</TableCell>\n                                                <TableCell>{admin.email}</TableCell>\n                                                <TableCell className=\"text-right\">\n                                                    <Button variant=\"ghost\" size=\"icon\" disabled>\n                                                        <Trash2 className=\"h-4 w-4\" />\n                                                        <span className=\"sr-only\">Delete Admin</span>\n                                                    </Button>\n                                                </TableCell>\n                                            </TableRow>\n                                        ))}\n                                    </TableBody>\n                                </Table>\n                            </div>\n                        </CardContent>\n                    </Card>\n                </TabsContent>\n\n                <TabsContent value=\"settings\">\n                    <Card>\n                        <CardHeader>\n                            <CardTitle className=\"flex items-center gap-2\"><Settings className=\"h-5 w-5\" /> Configuración de la Tienda</CardTitle>\n                            <CardDescription>Modifica la información que se muestra en la página principal y el pie de página.</CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                            <StoreSettingsForm settings={storeSettings} />\n                        </CardContent>\n                    </Card>\n                </TabsContent>\n\n                <TabsContent value=\"developers\">\n                    <div className=\"grid gap-6\">\n                        <Card>\n                            <CardHeader>\n                                <CardTitle>Equipo de Desarrollo</CardTitle>\n                                <CardDescription>Conoce a las personas detrás de la magia.</CardDescription>\n                            </CardHeader>\n                            <CardContent className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n                                <Card className=\"flex flex-col items-center p-6 text-center\">\n                                    <Avatar className=\"h-24 w-24 mb-4\">\n                                        <AvatarImage src=\"https://placehold.co/150x150.png\" data-ai-hint=\"person portrait\" alt=\"Developer 1\" />\n                                        <AvatarFallback>JD</AvatarFallback>\n                                    </Avatar>\n                                    <h3 className=\"text-lg font-semibold\">Juan Developer</h3>\n                                    <p className=\"text-muted-foreground\">Lead Full-Stack Developer</p>\n                                    <p className=\"mt-2 text-sm text-center\">Apasionado por crear experiencias de usuario fluidas y eficientes desde el frontend hasta el backend.</p>\n                                </Card>\n                                <Card className=\"flex flex-col items-center p-6 text-center\">\n                                    <Avatar className=\"h-24 w-24 mb-4\">\n                                        <AvatarImage src=\"https://placehold.co/150x150.png\" data-ai-hint=\"person portrait\" alt=\"Developer 2\" />\n                                        <AvatarFallback>AI</AvatarFallback>\n                                    </Avatar>\n                                    <h3 className=\"text-lg font-semibold\">Ana Interfaz</h3>\n                                    <p className=\"text-muted-foreground\">UI/UX Designer</p>\n                                    <p className=\"mt-2 text-sm text-center\">Diseñando interfaces intuitivas y estéticamente agradables que mejoran la interacción del usuario.</p>\n                                </Card>\n                                <Card className=\"flex flex-col items-center p-6 text-center\">\n                                    <Avatar className=\"h-24 w-24 mb-4\">\n                                        <AvatarImage src=\"https://placehold.co/150x150.png\" data-ai-hint=\"person portrait\" alt=\"Developer 3\" />\n                                        <AvatarFallback>PA</AvatarFallback>\n                                    </Avatar>\n                                    <h3 className=\"text-lg font-semibold\">Pedro API</h3>\n                                    <p className=\"text-muted-foreground\">Backend & AI Specialist</p>\n                                    <p className=\"mt-2 text-sm text-center\">Construyendo la lógica del servidor, la base de datos y los flujos de inteligencia artificial que potencian la aplicación.</p>\n                                </Card>\n                            </CardContent>\n                        </Card>\n                        <Card>\n                            <CardHeader>\n                                <CardTitle>Stack Tecnológico</CardTitle>\n                                <CardDescription>Las herramientas que hacen posible esta aplicación.</CardDescription>\n                            </CardHeader>\n                            <CardContent>\n                                <ul className=\"list-disc list-inside space-y-2\">\n                                    <li><span className=\"font-semibold\">Framework:</span> Next.js (React)</li>\n                                    <li><span className=\"font-semibold\">Estilos:</span> Tailwind CSS</li>\n                                    <li><span className=\"font-semibold\">Componentes UI:</span> ShadCN/UI</li>\n                                    <li><span className=\"font-semibold\">Inteligencia Artificial:</span> Google Genkit</li>\n                                    <li><span className=\"font-semibold\">Backend:</span> Python (Flask)</li>\n                                </ul>\n                            </CardContent>\n                        </Card>\n                    </div>\n                </TabsContent>\n            </Tabs>\n            \n            <Dialog open={isInvoiceDialogOpen} onOpenChange={setInvoiceDialog}>\n                <DialogContent className=\"sm:max-w-4xl h-[90vh] flex flex-col\">\n                    <DialogHeader>\n                        <DialogTitle>Factura Generada</DialogTitle>\n                    </DialogHeader>\n                    <div className=\"flex-1 overflow-auto border rounded-md\">\n                        {generatedInvoiceHtml && (\n                            <iframe \n                                srcDoc={generatedInvoiceHtml} \n                                className=\"w-full h-full\"\n                                title=\"Generated Invoice\"\n                            />\n                        )}\n                    </div>\n                     <DialogFooter>\n                        <Button onClick={() => setInvoiceDialog(false)}>Cerrar</Button>\n                    </DialogFooter>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n}\n",
  "src/app/admin/page.tsx": "/**\n * @fileoverview Página de inicio de sesión para administradores.\n * Proporciona un formulario para que los usuarios con privilegios de administrador\n * accedan al panel de control, utilizando un Server Action para la autenticación.\n */\nimport Link from 'next/link';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { loginUser } from '@/lib/actions';\n\nexport default function AdminLoginPage() {\n  return (\n    <div className=\"flex items-center justify-center min-h-[80vh] bg-secondary\">\n      <Card className=\"w-full max-w-sm mx-4\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-headline\">Admin Access</CardTitle>\n          <CardDescription>Enter credentials to access the dashboard.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form action={loginUser} className=\"grid gap-4\">\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input id=\"email\" name=\"email\" type=\"email\" placeholder=\"admin@royalfernet.com\" required />\n            </div>\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input id=\"password\" name=\"password\" type=\"password\" required />\n            </div>\n            <Button type=\"submit\" className=\"w-full mt-2\">Login</Button>\n          </form>\n          <div className=\"mt-4 text-center text-sm\">\n            <Link href=\"/\" className=\"underline\">\n              Back to main site\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
  "src/app/catalog/page.tsx": "/**\n * @fileoverview Página del catálogo de productos.\n * Muestra una cuadrícula con todos los productos disponibles en la tienda,\n * permitiendo a los usuarios explorarlos y buscarlos.\n */\nimport { ProductCard } from '@/components/product-card';\nimport { fetchProducts } from '@/lib/data';\nimport type { Metadata } from 'next';\n\nexport const metadata: Metadata = {\n    title: 'Catalog - Royal-Fernet',\n    description: 'Explore our full collection of exquisite timepieces.',\n};\n\nexport default async function CatalogPage({ searchParams }: { searchParams?: { q?: string } }) {\n  const query = searchParams?.q || '';\n  const products = await fetchProducts(query);\n\n  return (\n    <div className=\"container mx-auto py-12 px-4\">\n      <h1 className=\"text-4xl font-bold font-headline mb-8 text-center\">\n        {query ? `Searching for \"${query}\"` : 'Our Collection'}\n      </h1>\n      \n      {products.length > 0 ? (\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 md:gap-8\">\n          {products.map((product) => (\n            <ProductCard key={product.id} product={product} />\n          ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-16\">\n          <p className=\"text-2xl text-muted-foreground\">No products found.</p>\n          <p className=\"text-muted-foreground mt-2\">Try adjusting your search or check back later.</p>\n        </div>\n      )}\n    </div>\n  );\n}\n",
  "src/app/globals.css": "/*\n * Archivo CSS global para la aplicación.\n * Aquí se importan las utilidades de Tailwind CSS y se definen las variables\n * de estilo base para los temas claro y oscuro, como colores, bordes y radios.\n * Estas variables son utilizadas por los componentes de ShadCN y Tailwind.\n */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 0 0% 9%;\n    --card: 0 0% 100%;\n    --card-foreground: 0 0% 9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 0 0% 9%;\n    --primary: 0 0% 9%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 0 0% 96.1%;\n    --secondary-foreground: 0 0% 9%;\n    --muted: 0 0% 96.1%;\n    --muted-foreground: 0 0% 45.1%;\n    --accent: 0 0% 96.1%;\n    --accent-foreground: 0 0% 9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 89.8%;\n    --input: 0 0% 89.8%;\n    --ring: 0 0% 9%;\n    --radius: 0.5rem;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n  }\n  .dark {\n    --background: 0 0% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 0 0% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 0 0% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 0 0% 9%;\n    --secondary: 0 0% 14.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 0 0% 14.9%;\n    --muted-foreground: 0 0% 63.9%;\n    --accent: 0 0% 14.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 14.9%;\n    --input: 0 0% 14.9%;\n    --ring: 0 0% 83.1%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n",
  "src/app/layout.tsx": "'use client';\n/**\n * @fileoverview Layout principal de la aplicación.\n * Este componente envuelve todas las páginas y define la estructura HTML base.\n * También configura los proveedores de contexto y renderiza la barra de navegación\n * o la barra de administración según la ruta actual.\n */\nimport './globals.css';\nimport { usePathname } from 'next/navigation';\nimport { Toaster } from \"@/components/ui/toaster\"\nimport { Navbar } from '@/components/navbar';\nimport { AdminNavbar } from '@/components/admin-navbar';\nimport { Footer } from '@/components/footer';\nimport { CustomerServiceWidget } from '@/components/customer-service-widget';\nimport { NotificationModal } from '@/components/notification-modal';\nimport { CartProvider } from '@/hooks/use-cart';\nimport { ThemeProvider } from '@/components/theme-provider';\n\n// La exportación de metadatos solo se admite en componentes de servidor.\n// Se ha movido a etiquetas estáticas en el <head>.\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  const pathname = usePathname();\n  const isAdminPage = pathname.startsWith('/admin');\n\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <head>\n        <title>Royal-Fernet - Exquisite Timepieces</title>\n        <meta name=\"description\" content=\"Discover our collection of luxury watches. Timeless elegance and precision craftsmanship.\" />\n        <meta name=\"keywords\" content=\"watches, luxury watches, Royal-Fernet, timepieces\" />\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossOrigin=\"anonymous\" />\n        <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&display=swap\" rel=\"stylesheet\" />\n      </head>\n      <body className=\"font-body antialiased bg-background text-foreground\" suppressHydrationWarning>\n        <ThemeProvider\n          attribute=\"class\"\n          defaultTheme=\"dark\"\n          enableSystem\n          disableTransitionOnChange\n        >\n          <CartProvider>\n            {!isAdminPage && <NotificationModal />}\n            <div className=\"relative flex min-h-screen flex-col\">\n              {isAdminPage ? <AdminNavbar /> : <Navbar />}\n              <main className=\"flex-1\">{children}</main>\n              {!isAdminPage && <Footer />}\n            </div>\n            <CustomerServiceWidget />\n            <Toaster />\n          </CartProvider>\n        </ThemeProvider>\n      </body>\n    </html>\n  );\n}\n",
  "src/app/login/page.tsx": "/**\n * @fileoverview Página de inicio de sesión para usuarios generales.\n * Contiene un formulario para que los usuarios ingresen sus credenciales\n * y accedan a sus cuentas, utilizando Server Actions para la lógica de backend.\n */\nimport Link from 'next/link';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { loginUser } from '@/lib/actions'; // Assuming general user login is the same as admin for now\n\nexport default function LoginPage() {\n  return (\n    <div className=\"flex items-center justify-center min-h-[80vh] bg-background\">\n      <Card className=\"w-full max-w-sm mx-4\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-headline\">Login</CardTitle>\n          <CardDescription>Enter your email below to login to your account.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form action={loginUser} className=\"grid gap-4\">\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input id=\"email\" name=\"email\" type=\"email\" placeholder=\"m@example.com\" required />\n            </div>\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input id=\"password\" name=\"password\" type=\"password\" required />\n            </div>\n            <Button type=\"submit\" className=\"w-full mt-2\">Login</Button>\n          </form>\n          <div className=\"mt-4 text-center text-sm\">\n            Don&apos;t have an account?{\" \"}\n            <Link href=\"/register\" className=\"underline\">\n              Sign up\n            </Link>\n          </div>\n           <div className=\"mt-2 text-center text-sm\">\n            Are you an admin?{\" \"}\n            <Link href=\"/admin\" className=\"underline\">\n              Login here\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
  "src/app/page.tsx": "/**\n * @fileoverview Página de inicio de la aplicación.\n * Es la página principal que ven los usuarios al visitar el sitio.\n * Muestra una sección de héroe, una colección destacada de productos\n * y información sobre la tienda física.\n */\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport { ProductCarousel } from '@/components/product-carousel';\nimport { fetchProducts, fetchStoreSettings } from '@/lib/data';\nimport { MapPin } from 'lucide-react';\nimport type { StoreSettings } from '@/lib/definitions';\n\n// Configuración por defecto en caso de que la API no responda o no haya datos\nconst defaultSettings: StoreSettings = {\n  title: \"Visita Nuestra Tienda Insignia\",\n  address: \"123 Avenida de Lujo, Ginebra, Suiza\",\n  hours: \"Abierto de Lunes a Sábado, de 10:00 AM a 7:00 PM\",\n  mainImageUrl: \"https://placehold.co/1920x1080.png\",\n  mapImageUrl: \"https://placehold.co/1200x400.png\"\n};\n\nexport default async function Home() {\n  const products = await fetchProducts();\n  const featuredProducts = products.slice(0, 8);\n  const settings = await fetchStoreSettings();\n  const storeInfo = settings || defaultSettings;\n\n  return (\n    <div className=\"flex flex-col\">\n      <section className=\"relative h-[60vh] md:h-[80vh] w-full flex items-center justify-center text-center text-white\">\n        <Image\n          src={storeInfo.mainImageUrl}\n          alt=\"Luxury watch on a dark background\"\n          data-ai-hint=\"luxury watch dark\"\n          layout=\"fill\"\n          objectFit=\"cover\"\n          className=\"absolute inset-0 z-0 brightness-50\"\n          priority\n        />\n        <div className=\"relative z-10 p-4 animate-fade-in-up\">\n          <h1 className=\"text-4xl md:text-6xl font-headline font-bold tracking-tight\">\n            Elegancia Atemporal, Redefinida.\n          </h1>\n          <p className=\"mt-4 max-w-2xl mx-auto text-lg md:text-xl text-primary-foreground/80\">\n            Descubre nuestra colección exclusiva de relojes magistralmente elaborados.\n          </p>\n          <Button asChild size=\"lg\" className=\"mt-8\">\n            <Link href=\"/catalog\">Explorar Colección</Link>\n          </Button>\n        </div>\n      </section>\n\n      <section className=\"py-16 md:py-24 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-3xl md:text-4xl font-headline font-bold text-center mb-12\">\n            Colección Destacada\n          </h2>\n          <ProductCarousel products={featuredProducts} />\n        </div>\n      </section>\n      \n      <section className=\"py-16 md:py-24 bg-secondary\">\n        <div className=\"container mx-auto px-4 text-center\">\n            <MapPin className=\"h-12 w-12 mx-auto mb-4 text-primary\" />\n            <h2 className=\"text-3xl md:text-4xl font-headline font-bold mb-4\">{storeInfo.title}</h2>\n            <p className=\"text-lg text-muted-foreground mb-2\">{storeInfo.address}</p>\n            <p className=\"text-muted-foreground\">{storeInfo.hours}</p>\n             <div className=\"mt-8 w-full h-96 rounded-lg overflow-hidden shadow-lg\">\n                <Image \n                    src={storeInfo.mapImageUrl} \n                    alt=\"Mapa mostrando la ubicación de la tienda\"\n                    data-ai-hint=\"store map\"\n                    width={1200}\n                    height={400}\n                    className=\"w-full h-full object-cover\"\n                />\n            </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n",
  "src/app/product/[id]/page.tsx": "/**\n * @fileoverview Página de detalle de un producto específico.\n * Muestra información detallada de un producto, incluyendo imágenes, nombre,\n * precio, descripción y un botón para añadirlo al carrito.\n * Se obtiene el ID del producto de la URL.\n */\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport Image from 'next/image';\nimport { notFound } from 'next/navigation';\nimport { useCart } from '@/hooks/use-cart';\nimport { fetchProductById } from '@/lib/data';\nimport type { Product } from '@/lib/definitions';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from '@/components/ui/carousel';\nimport { Skeleton } from '@/components/ui/skeleton';\n\nexport default function ProductDetailPage({ params }: { params: { id: string } }) {\n  const [product, setProduct] = useState<Product | null>(null);\n  const [loading, setLoading] = useState(true);\n  const { addToCart } = useCart();\n\n  useEffect(() => {\n    const getProduct = async () => {\n      const fetchedProduct = await fetchProductById(params.id);\n      if (!fetchedProduct) {\n        notFound();\n      }\n      setProduct(fetchedProduct);\n      setLoading(false);\n    };\n    getProduct();\n  }, [params.id]);\n\n  if (loading) {\n    return <ProductDetailSkeleton />;\n  }\n\n  if (!product) {\n    return notFound();\n  }\n  \n  const originalPrice = product.price;\n  const discountedPrice = product.discount\n    ? originalPrice - (originalPrice * product.discount) / 100\n    : originalPrice;\n\n  return (\n    <div className=\"container mx-auto py-12 px-4\">\n      <div className=\"grid md:grid-cols-2 gap-8 lg:gap-16\">\n        <div className=\"w-full\">\n          <Carousel>\n            <CarouselContent>\n              {product.images.map((img, index) => (\n                <CarouselItem key={index}>\n                  <div className=\"aspect-square relative w-full rounded-lg overflow-hidden\">\n                    <Image\n                      src={img}\n                      alt={`${product.name} image ${index + 1}`}\n                      data-ai-hint=\"watch detail\"\n                      fill\n                      className=\"object-cover\"\n                    />\n                  </div>\n                </CarouselItem>\n              ))}\n            </CarouselContent>\n            <CarouselPrevious className=\"left-4\" />\n            <CarouselNext className=\"right-4\" />\n          </Carousel>\n        </div>\n        <div>\n          <h1 className=\"text-3xl lg:text-4xl font-bold font-headline mb-2\">{product.name}</h1>\n          <p className=\"text-lg text-muted-foreground mb-4\">{product.category}</p>\n          \n          {product.discount && (\n            <div className=\"mb-4\">\n              <Badge variant=\"destructive\">{product.discount}% OFF</Badge>\n            </div>\n          )}\n\n          <div className=\"flex items-baseline gap-4 mb-6\">\n            <p className=\"text-3xl font-bold text-primary\">${discountedPrice.toFixed(2)}</p>\n            {product.discount && (\n              <p className=\"text-xl text-muted-foreground line-through\">${originalPrice.toFixed(2)}</p>\n            )}\n          </div>\n          \n          <p className=\"text-foreground/80 leading-relaxed mb-8\">{product.description}</p>\n          \n          <Button size=\"lg\" className=\"w-full md:w-auto\" onClick={() => addToCart(product)}>\n            Add to Cart\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction ProductDetailSkeleton() {\n    return (\n        <div className=\"container mx-auto py-12 px-4\">\n            <div className=\"grid md:grid-cols-2 gap-8 lg:gap-16\">\n                <div>\n                    <Skeleton className=\"w-full aspect-square rounded-lg\" />\n                </div>\n                <div className=\"space-y-4\">\n                    <Skeleton className=\"h-10 w-3/4\" />\n                    <Skeleton className=\"h-6 w-1/4\" />\n                    <Skeleton className=\"h-12 w-1/2\" />\n                    <Skeleton className=\"h-24 w-full\" />\n                    <Skeleton className=\"h-12 w-full md:w-40\" />\n                </div>\n            </div>\n        </div>\n    );\n}\n",
  "src/app/register/page.tsx": "/**\n * @fileoverview Página de registro de nuevos usuarios.\n * Proporciona un formulario para que los visitantes creen una nueva cuenta\n * en la tienda, utilizando Server Actions para manejar el proceso.\n */\nimport Link from 'next/link';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { registerUser } from '@/lib/actions';\n\nexport default function RegisterPage() {\n  return (\n    <div className=\"flex items-center justify-center min-h-[80vh] bg-background\">\n      <Card className=\"w-full max-w-sm mx-4\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-headline\">Sign Up</CardTitle>\n          <CardDescription>Create your account to start shopping.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form action={registerUser} className=\"grid gap-4\">\n             <div className=\"grid gap-2\">\n              <Label htmlFor=\"name\">Name</Label>\n              <Input id=\"name\" name=\"name\" type=\"text\" placeholder=\"John Doe\" required />\n            </div>\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input id=\"email\" name=\"email\" type=\"email\" placeholder=\"m@example.com\" required />\n            </div>\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input id=\"password\" name=\"password\" type=\"password\" required />\n            </div>\n            <Button type=\"submit\" className=\"w-full mt-2\">Create Account</Button>\n          </form>\n          <div className=\"mt-4 text-center text-sm\">\n            Already have an account?{\" \"}\n            <Link href=\"/login\" className=\"underline\">\n              Login\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
  "src/components/admin-navbar.tsx": "'use client';\n/**\n * @fileoverview Componente de la barra de navegación para la sección de administración.\n * Proporciona una navegación simplificada específica para el panel de control,\n * incluyendo un selector de tema.\n */\nimport Link from 'next/link';\nimport { Gem, LogOut } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { ThemeToggle } from './theme-toggle';\n\nexport function AdminNavbar() {\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b border-border/40 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container flex h-16 items-center justify-between\">\n        <Link href=\"/admin/dashboard\" className=\"flex items-center space-x-2\">\n          <Gem className=\"h-6 w-6 text-primary\" />\n          <span className=\"font-bold sm:inline-block font-headline\">\n            Royal-Fernet Admin\n          </span>\n        </Link>\n        <nav className=\"flex items-center gap-2\">\n          <ThemeToggle />\n          <Button asChild variant=\"outline\">\n            <Link href=\"/\">\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              Exit to Site\n            </Link>\n          </Button>\n        </nav>\n      </div>\n    </header>\n  );\n}\n",
  "src/components/cart-sheet.tsx": "/**\n * @fileoverview Componente del carrito de compras.\n * Se muestra como un panel lateral (sheet) y permite a los usuarios ver\n * los productos que han agregado, modificar las cantidades, eliminarlos\n * y proceder al pago, que ahora redirige a WhatsApp con los detalles del pedido.\n */\n\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport Image from 'next/image';\nimport { ShoppingCart, X, Plus, Minus } from 'lucide-react';\nimport { Button } from './ui/button';\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n  SheetFooter,\n} from './ui/sheet';\nimport { useCart } from '@/hooks/use-cart';\nimport { Separator } from './ui/separator';\n\nexport function CartSheet() {\n  const { cartItems, removeFromCart, updateQuantity, cartTotal, clearCart } = useCart();\n  const [isMounted, setIsMounted] = useState(false);\n\n  useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  const handleCheckout = () => {\n    // IMPORTANT: Replace with your actual WhatsApp phone number\n    const phoneNumber = \"1234567890\"; \n    \n    let message = \"¡Hola! Quisiera hacer un pedido de los siguientes artículos:\\n\\n\";\n    \n    cartItems.forEach(item => {\n        const itemPrice = item.product.discount\n            ? item.product.price - (item.product.price * item.product.discount / 100)\n            : item.product.price;\n        const totalItemPrice = itemPrice * item.quantity;\n        \n        message += `*${item.product.name}*\\n`;\n        message += `(Ref: ${item.product.id})\\n`;\n        message += `Cantidad: ${item.quantity}\\n`;\n        message += `Imagen: ${item.product.images[0]}\\n`;\n        message += `Subtotal: $${totalItemPrice.toFixed(2)}\\n\\n`;\n    });\n\n    message += `*Monto Total: $${cartTotal.toFixed(2)}*\\n\\n`;\n    message += \"Por favor, confirme mi pedido y proporcione los detalles de pago. ¡Gracias!\";\n\n    // The image URL is now included in the message text.\n    // Note: Including images directly in a WhatsApp message via URL is not reliably supported.\n    // The product reference ID and name are included for clear identification.\n\n    const whatsappUrl = `https://wa.me/${phoneNumber}?text=${encodeURIComponent(message)}`;\n    \n    window.open(whatsappUrl, '_blank');\n    clearCart();\n  };\n\n  const itemCount = cartItems.reduce((acc, item) => acc + item.quantity, 0);\n\n  if (!isMounted) {\n    return (\n      <Button variant=\"ghost\" size=\"icon\" className=\"relative\">\n        <ShoppingCart className=\"h-5 w-5\" />\n        <span className=\"sr-only\">Open Cart</span>\n      </Button>\n    )\n  }\n\n  return (\n    <Sheet>\n      <SheetTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" className=\"relative\">\n          <ShoppingCart className=\"h-5 w-5\" />\n          {itemCount > 0 && (\n            <span className=\"absolute -top-1 -right-1 flex h-4 w-4 items-center justify-center rounded-full bg-primary text-xs text-primary-foreground\">\n              {itemCount}\n            </span>\n          )}\n          <span className=\"sr-only\">Open Cart</span>\n        </Button>\n      </SheetTrigger>\n      <SheetContent className=\"flex w-full flex-col pr-0 sm:max-w-lg\">\n        <SheetHeader className=\"px-6\">\n          <SheetTitle>Carrito de Compras ({itemCount})</SheetTitle>\n        </SheetHeader>\n        <Separator />\n        {cartItems.length > 0 ? (\n          <>\n            <div className=\"flex-1 overflow-y-auto px-6\">\n              <div className=\"flex flex-col gap-4 py-4\">\n                {cartItems.map(({ product, quantity }) => (\n                  <div key={product.id} className=\"flex items-center space-x-4\">\n                    <Image\n                      src={product.images[0]}\n                      alt={product.name}\n                      width={64}\n                      height={64}\n                      className=\"rounded-md object-cover\"\n                    />\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium\">{product.name}</p>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <Button variant=\"outline\" size=\"icon\" className=\"h-6 w-6\" onClick={() => updateQuantity(product.id, quantity - 1)}>\n                            <Minus className=\"h-3 w-3\" />\n                        </Button>\n                        <span className=\"w-4 text-center\">{quantity}</span>\n                         <Button variant=\"outline\" size=\"icon\" className=\"h-6 w-6\" onClick={() => updateQuantity(product.id, quantity + 1)}>\n                            <Plus className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col items-end\">\n                      <p className=\"font-semibold\">${(product.price * quantity).toFixed(2)}</p>\n                      <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 text-muted-foreground\" onClick={() => removeFromCart(product.id)}>\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n            <Separator />\n            <SheetFooter className=\"px-6 py-4 bg-secondary\">\n                <div className=\"w-full space-y-4\">\n                    <div className=\"flex justify-between font-semibold text-lg\">\n                        <span>Total</span>\n                        <span>${cartTotal.toFixed(2)}</span>\n                    </div>\n                    <Button className=\"w-full\" size=\"lg\" onClick={handleCheckout}>Pagar por WhatsApp</Button>\n                </div>\n            </SheetFooter>\n          </>\n        ) : (\n          <div className=\"flex flex-1 items-center justify-center\">\n            <p className=\"text-muted-foreground\">\n              Tu carrito está vacío.\n            </p>\n          </div>\n        )}\n      </SheetContent>\n    </Sheet>\n  );\n}\n",
  "src/components/customer-service-widget.tsx": "/**\n * @fileoverview Componente del widget de chat de servicio al cliente.\n * Muestra un botón flotante que abre un popover con una interfaz de chat.\n * Utiliza un flujo de Genkit para proporcionar respuestas generadas por IA a las\n * consultas de los usuarios en tiempo real.\n */\n\"use client\";\n\nimport { useState } from 'react';\nimport { MessageSquare, Send, Bot, User } from 'lucide-react';\nimport { Button } from './ui/button';\nimport { Popover, PopoverContent, PopoverTrigger } from './ui/popover';\nimport { Input } from './ui/input';\nimport { ScrollArea } from './ui/scroll-area';\nimport { customerService } from '@/ai/flows/customer-service-flow';\nimport { Avatar, AvatarFallback, AvatarImage } from './ui/avatar';\nimport { cn } from '@/lib/utils';\n\ntype Message = {\n    role: 'user' | 'assistant';\n    content: string;\n};\n\nexport function CustomerServiceWidget() {\n    const [messages, setMessages] = useState<Message[]>([\n        { role: 'assistant', content: \"Hello! How can I help you today?\" }\n    ]);\n    const [input, setInput] = useState('');\n    const [loading, setLoading] = useState(false);\n\n    const handleSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n        if (!input.trim() || loading) return;\n\n        const userMessage: Message = { role: 'user', content: input };\n        setMessages(prev => [...prev, userMessage]);\n        setInput('');\n        setLoading(true);\n\n        try {\n            const response = await customerService(input);\n            const assistantMessage: Message = { role: 'assistant', content: response };\n            setMessages(prev => [...prev, assistantMessage]);\n        } catch (error) {\n            console.error(\"Error calling customer service AI:\", error);\n            const errorMessage: Message = { role: 'assistant', content: \"Sorry, I'm having trouble connecting. Please try again later.\" };\n            setMessages(prev => [...prev, errorMessage]);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <Popover>\n            <PopoverTrigger asChild>\n                <Button \n                    size=\"icon\" \n                    className=\"fixed bottom-6 right-6 h-14 w-14 rounded-full shadow-lg\"\n                    aria-label=\"Open customer service chat\"\n                >\n                    <MessageSquare className=\"h-7 w-7\" />\n                </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-80 h-96 flex flex-col p-0 mr-4\" align=\"end\">\n                <div className=\"p-4 bg-primary text-primary-foreground rounded-t-md\">\n                    <h3 className=\"font-semibold\">Customer Service</h3>\n                    <p className=\"text-xs text-primary-foreground/80\">Powered by AI</p>\n                </div>\n                <ScrollArea className=\"flex-1 p-4\">\n                    <div className=\"space-y-4\">\n                        {messages.map((message, index) => (\n                            <div key={index} className={cn(\n                                \"flex items-start gap-2\",\n                                message.role === 'user' ? 'justify-end' : 'justify-start'\n                            )}>\n                                {message.role === 'assistant' && (\n                                    <Avatar className=\"h-6 w-6\">\n                                        <AvatarFallback><Bot className=\"h-4 w-4\" /></AvatarFallback>\n                                    </Avatar>\n                                )}\n                                <div className={cn(\n                                    \"rounded-lg px-3 py-2 text-sm max-w-[80%]\",\n                                    message.role === 'user' ? 'bg-primary text-primary-foreground' : 'bg-muted'\n                                )}>\n                                    {message.content}\n                                </div>\n                                {message.role === 'user' && (\n                                     <Avatar className=\"h-6 w-6\">\n                                        <AvatarFallback><User className=\"h-4 w-4\" /></AvatarFallback>\n                                    </Avatar>\n                                )}\n                            </div>\n                        ))}\n                         {loading && (\n                            <div className=\"flex items-start gap-2 justify-start\">\n                                 <Avatar className=\"h-6 w-6\">\n                                    <AvatarFallback><Bot className=\"h-4 w-4\" /></AvatarFallback>\n                                </Avatar>\n                                <div className=\"rounded-lg px-3 py-2 text-sm bg-muted\">\n                                    <div className=\"flex items-center space-x-1\">\n                                        <span className=\"h-2 w-2 bg-foreground rounded-full animate-bounce [animation-delay:-0.3s]\"></span>\n                                        <span className=\"h-2 w-2 bg-foreground rounded-full animate-bounce [animation-delay:-0.15s]\"></span>\n                                        <span className=\"h-2 w-2 bg-foreground rounded-full animate-bounce\"></span>\n                                    </div>\n                                </div>\n                            </div>\n                         )}\n                    </div>\n                </ScrollArea>\n                <form onSubmit={handleSubmit} className=\"p-4 border-t\">\n                    <div className=\"relative\">\n                        <Input \n                            value={input}\n                            onChange={(e) => setInput(e.target.value)}\n                            placeholder=\"Ask a question...\"\n                            disabled={loading}\n                        />\n                        <Button type=\"submit\" size=\"icon\" variant=\"ghost\" className=\"absolute top-0 right-0 h-full\" disabled={loading}>\n                            <Send className=\"h-4 w-4\"/>\n                        </Button>\n                    </div>\n                </form>\n            </PopoverContent>\n        </Popover>\n    );\n}\n",
  "src/components/footer.tsx": "/**\n * @fileoverview Componente del pie de página de la aplicación.\n * Muestra información de contacto, enlaces de navegación, redes sociales,\n * y el aviso de copyright.\n */\nimport Link from 'next/link';\nimport { Gem, Twitter, Instagram, Facebook } from 'lucide-react';\n\nexport function Footer() {\n  const year = new Date().getFullYear();\n  return (\n    <footer id=\"contact\" className=\"bg-secondary text-secondary-foreground\">\n      <div className=\"container mx-auto py-12 px-4\">\n        <div className=\"flex flex-col md:flex-row justify-between items-center text-center md:text-left\">\n          <div className=\"mb-8 md:mb-0\">\n            <Link href=\"/\" className=\"flex items-center justify-center md:justify-start space-x-2 mb-4\">\n              <Gem className=\"h-8 w-8 text-primary\" />\n              <span className=\"text-2xl font-bold font-headline\">Royal-Fernet</span>\n            </Link>\n            <p className=\"text-muted-foreground\">Crafting legacies, one tick at a time.</p>\n          </div>\n          <div className=\"flex flex-col md:flex-row space-y-8 md:space-y-0 md:space-x-16\">\n            <div>\n              <h3 className=\"font-bold mb-2\">Explore</h3>\n              <ul className=\"space-y-1\">\n                <li><Link href=\"/catalog\" className=\"text-muted-foreground hover:text-primary\">Catalog</Link></li>\n                <li><Link href=\"/#featured\" className=\"text-muted-foreground hover:text-primary\">Featured</Link></li>\n                <li><Link href=\"/about\" className=\"text-muted-foreground hover:text-primary\">About Us</Link></li>\n              </ul>\n            </div>\n            <div>\n              <h3 className=\"font-bold mb-2\">Support</h3>\n              <ul className=\"space-y-1\">\n                <li><Link href=\"/faq\" className=\"text-muted-foreground hover:text-primary\">FAQ</Link></li>\n                <li><Link href=\"/shipping\" className=\"text-muted-foreground hover:text-primary\">Shipping & Returns</Link></li>\n                <li><Link href=\"/contact\" className=\"text-muted-foreground hover:text-primary\">Contact</Link></li>\n              </ul>\n            </div>\n            <div>\n                <h3 className=\"font-bold mb-2\">Follow Us</h3>\n                <div className=\"flex justify-center md:justify-start space-x-4\">\n                    <Link href=\"#\" className=\"text-muted-foreground hover:text-primary\"><Twitter /></Link>\n                    <Link href=\"#\" className=\"text-muted-foreground hover:text-primary\"><Instagram /></Link>\n                    <Link href=\"#\" className=\"text-muted-foreground hover:text-primary\"><Facebook /></Link>\n                </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"mt-12 pt-8 border-t border-border text-center text-muted-foreground text-sm\">\n          <p>&copy; {year} Royal-Fernet. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n",
  "src/components/navbar.tsx": "/**\n * @fileoverview Componente de la barra de navegación principal.\n * Contiene el logotipo, los enlaces de navegación a las secciones principales\n * del sitio, un buscador, el selector de tema, el acceso al perfil de usuario y al carrito de compras.\n */\n\"use client\";\n\nimport Link from 'next/link';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { Gem, User, Menu, Search } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\nimport { CartSheet } from './cart-sheet';\nimport { ThemeToggle } from './theme-toggle';\nimport { Input } from './ui/input';\nimport { useEffect, useState } from 'react';\n\nconst navLinks = [\n  { href: '/', label: 'Home' },\n  { href: '/catalog', label: 'Catalog' },\n  { href: '/#contact', label: 'Contact' },\n];\n\nfunction SearchBar() {\n    const router = useRouter();\n    const searchParams = useSearchParams();\n    const [query, setQuery] = useState(searchParams.get('q') || '');\n\n    useEffect(() => {\n        setQuery(searchParams.get('q') || '');\n    }, [searchParams]);\n\n    const handleSearch = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const formData = new FormData(event.currentTarget);\n        const searchQuery = formData.get('search') as string;\n        if (searchQuery.trim()) {\n            router.push(`/catalog?q=${encodeURIComponent(searchQuery.trim())}`);\n        } else {\n            router.push('/catalog');\n        }\n    };\n    \n    return (\n        <form onSubmit={handleSearch} className=\"relative w-full ml-auto\">\n            <Input\n                type=\"search\"\n                name=\"search\"\n                placeholder=\"Search products...\"\n                className=\"pr-10\"\n                value={query}\n                onChange={(e) => setQuery(e.target.value)}\n            />\n            <Button type=\"submit\" size=\"icon\" variant=\"ghost\" className=\"absolute top-0 right-0 h-full\">\n                <Search className=\"h-4 w-4\" />\n                <span className=\"sr-only\">Search</span>\n            </Button>\n        </form>\n    )\n}\n\nexport function Navbar() {\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b border-border/40 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container flex h-16 items-center\">\n        <div className=\"mr-4 hidden md:flex\">\n          <Link href=\"/\" className=\"mr-6 flex items-center space-x-2\">\n            <Gem className=\"h-6 w-6\" />\n            <span className=\"hidden font-bold sm:inline-block font-headline\">\n              Royal-Fernet\n            </span>\n          </Link>\n          <nav className=\"flex items-center space-x-6 text-sm font-medium\">\n            {navLinks.map((link) => (\n              <Link\n                key={link.href}\n                href={link.href}\n                className=\"transition-colors hover:text-foreground/80 text-foreground/60\"\n              >\n                {link.label}\n              </Link>\n            ))}\n          </nav>\n        </div>\n\n        <div className=\"flex flex-1 items-center justify-between md:justify-end gap-2\">\n          <div className=\"md:hidden\">\n            <Sheet>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\">\n                  <Menu className=\"h-5 w-5\" />\n                  <span className=\"sr-only\">Toggle Menu</span>\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"left\" className=\"pr-0\">\n                <Link href=\"/\" className=\"mr-6 flex items-center space-x-2 mb-6\">\n                  <Gem className=\"h-6 w-6\" />\n                  <span className=\"font-bold font-headline\">Royal-Fernet</span>\n                </Link>\n                <div className=\"flex flex-col space-y-3\">\n                    {navLinks.map((link) => (\n                        <Link\n                            key={link.href}\n                            href={link.href}\n                            className=\"transition-colors hover:text-foreground/80 text-foreground/60\"\n                        >\n                            {link.label}\n                        </Link>\n                    ))}\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n\n          <div className=\"hidden md:flex flex-1 mx-4 max-w-sm\">\n            <SearchBar />\n          </div>\n\n          <nav className=\"flex items-center gap-1\">\n            <ThemeToggle />\n            <Button variant=\"ghost\" size=\"icon\" asChild>\n              <Link href=\"/login\">\n                <User className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Login</span>\n              </Link>\n            </Button>\n            <CartSheet />\n          </nav>\n        </div>\n      </div>\n       <div className=\"container pb-2 md:hidden\">\n            <SearchBar />\n       </div>\n    </header>\n  );\n}\n",
  "src/components/notification-modal.tsx": "/**\n * @fileoverview Componente modal para mostrar notificaciones al iniciar la app.\n * Obtiene la última notificación de la API y la muestra al usuario al cargar la página.\n */\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { fetchLatestNotification } from '@/lib/data';\nimport type { Notification } from '@/lib/definitions';\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n} from '@/components/ui/dialog';\n\nexport function NotificationModal() {\n  const [notification, setNotification] = useState<Notification | null>(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    fetchLatestNotification().then(data => {\n      if (data) {\n        setNotification(data);\n        setIsOpen(true);\n      }\n    });\n  }, []);\n\n  const handleDismiss = () => {\n    setIsOpen(false);\n  };\n  \n  const handleActionClick = () => {\n    handleDismiss();\n    // No need to manually navigate, Link component will do it.\n  };\n\n  if (!isOpen || !notification) {\n    return null;\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleDismiss}>\n       <DialogContent className=\"sm:max-w-md p-0 overflow-hidden\">\n        {notification.imageUrl && (\n          <div className=\"relative aspect-video w-full\">\n            <Image\n              src={notification.imageUrl}\n              alt=\"Notification image\"\n              data-ai-hint=\"announcement promotion\"\n              fill\n              className=\"object-cover\"\n            />\n          </div>\n        )}\n        <DialogHeader className=\"p-6 text-center items-center\">\n          <DialogTitle className=\"text-2xl font-headline\">A Special Announcement</DialogTitle>\n          <DialogDescription className=\"text-base text-muted-foreground pt-2\">\n            {notification.message}\n          </DialogDescription>\n        </DialogHeader>\n        <DialogFooter className=\"px-6 pb-6 pt-0 sm:justify-center gap-2 w-full flex-col-reverse sm:flex-row\">\n            <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} className=\"w-full sm:w-auto\">\n                Dismiss\n            </Button>\n            {notification.linkUrl && (\n                <Button asChild onClick={handleActionClick} className=\"w-full sm:w-auto\">\n                <Link href={notification.linkUrl}>Check it out</Link>\n                </Button>\n            )}\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
  "src/components/product-card.tsx": "/**\n * @fileoverview Componente de tarjeta de producto.\n * Muestra una vista previa de un producto, incluyendo su imagen, nombre,\n * categoría y precio. Se utiliza en listados como el catálogo o la\n * sección de productos destacados.\n */\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { Product } from '@/lib/definitions';\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Badge } from './ui/badge';\n\ninterface ProductCardProps {\n  product: Product;\n}\n\nexport function ProductCard({ product }: ProductCardProps) {\n  const originalPrice = product.price;\n  const discountedPrice = product.discount\n    ? originalPrice - (originalPrice * product.discount) / 100\n    : originalPrice;\n\n  return (\n    <Card className=\"w-full overflow-hidden transition-all duration-300 hover:shadow-lg hover:-translate-y-1 flex flex-col\">\n      <Link href={`/product/${product.id}`} className=\"block\">\n        <CardHeader className=\"p-0 relative\">\n          <Image\n            src={product.images[0]}\n            alt={product.name}\n            data-ai-hint=\"watch product\"\n            width={400}\n            height={400}\n            className=\"w-full h-auto aspect-square object-cover\"\n          />\n          {product.discount && (\n            <Badge variant=\"destructive\" className=\"absolute top-2 right-2\">\n              {product.discount}% OFF\n            </Badge>\n          )}\n        </CardHeader>\n      </Link>\n      <CardContent className=\"p-4 flex-grow\">\n        <CardTitle className=\"text-lg font-headline hover:text-primary/80\">\n          <Link href={`/product/${product.id}`}>{product.name}</Link>\n        </CardTitle>\n        <p className=\"text-sm text-muted-foreground mt-1\">{product.category}</p>\n      </CardContent>\n      <CardFooter className=\"p-4 pt-0 flex justify-between items-center\">\n        <div>\n          <p className=\"text-lg font-semibold\">\n            ${discountedPrice.toFixed(2)}\n          </p>\n          {product.discount && (\n            <p className=\"text-sm text-muted-foreground line-through\">\n              ${originalPrice.toFixed(2)}\n            </p>\n          )}\n        </div>\n        <Button asChild variant=\"outline\">\n          <Link href={`/product/${product.id}`}>View</Link>\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n",
  "src/components/product-carousel.tsx": "/**\n * @fileoverview Componente de carrusel de productos.\n * Muestra una colección de productos en un formato de carrusel deslizable,\n * ideal para secciones de productos destacados.\n */\nimport { Product } from '@/lib/definitions';\nimport { ProductCard } from './product-card';\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from '@/components/ui/carousel';\n\ninterface ProductCarouselProps {\n  products: Product[];\n}\n\nexport function ProductCarousel({ products }: ProductCarouselProps) {\n  return (\n    <Carousel\n      opts={{\n        align: 'start',\n        loop: true,\n      }}\n      className=\"w-full\"\n    >\n      <CarouselContent>\n        {products.map((product) => (\n          <CarouselItem key={product.id} className=\"md:basis-1/2 lg:basis-1/3 xl:basis-1/4\">\n            <div className=\"p-1 h-full\">\n              <ProductCard product={product} />\n            </div>\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <CarouselPrevious className=\"hidden md:flex\" />\n      <CarouselNext className=\"hidden md:flex\" />\n    </Carousel>\n  );\n}\n",
  "src/components/theme-provider.tsx": "/**\n * @fileoverview Proveedor de contexto para la gestión de temas.\n * Utiliza la librería `next-themes` para envolver la aplicación y permitir\n * el cambio dinámico entre temas (claro, oscuro, sistema).\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\"\nimport { type ThemeProviderProps } from \"next-themes/dist/types\"\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n",
  "src/components/theme-toggle.tsx": "/**\n * @fileoverview Componente de botón para cambiar el tema.\n * Muestra un menú desplegable que permite al usuario seleccionar\n * el tema de la aplicación (claro, oscuro o sistema).\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport { Moon, Sun } from \"lucide-react\"\nimport { useTheme } from \"next-themes\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\nexport function ThemeToggle() {\n  const { setTheme } = useTheme()\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\">\n          <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme(\"light\")}>\n          Light\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"dark\")}>\n          Dark\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"system\")}>\n          System\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n",
  "src/components/ui/accordion.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Accordion).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI,\n * que proporciona bloques de construcción reutilizables y estilizados para la interfaz.\n * Permite mostrar y ocultar secciones de contenido.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
  "src/components/ui/alert-dialog.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Alert Dialog).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Muestra un diálogo modal para interrumpir al usuario con información importante,\n * como una confirmación antes de una acción destructiva.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n",
  "src/components/ui/alert.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Alert).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Se utiliza para mostrar un mensaje destacado que llama la atención del usuario\n * sin interrumpir su flujo de trabajo.\n */\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n",
  "src/components/ui/avatar.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Avatar).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Se utiliza para mostrar una imagen o un fallback (iniciales) que representa\n * a un usuario o entidad.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
  "src/components/ui/badge.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Badge).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Se utiliza para mostrar pequeñas cantidades de información, como etiquetas o estados.\n */\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
  "src/components/ui/button.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Button).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Proporciona un botón estilizado con varias variantes (default, destructive,\n * outline, etc.) y tamaños.\n */\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
  "src/components/ui/calendar.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Calendar).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Proporciona un selector de fechas interactivo.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n",
  "src/components/ui/card.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Card).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Proporciona un contenedor estilizado para agrupar contenido relacionado,\n * con secciones para cabecera, contenido y pie de página.\n */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
  "src/components/ui/carousel.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Carousel).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Permite mostrar una serie de elementos en un formato deslizable.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n",
  "src/components/ui/chart.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Chart).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Proporciona envoltorios y estilización para la biblioteca de gráficos Recharts,\n * facilitando la creación de gráficos de datos consistentes con el tema de la aplicación.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n",
  "src/components/ui/checkbox.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Checkbox).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Es una casilla de verificación que puede ser marcada o desmarcada.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n",
  "src/components/ui/collapsible.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Collapsible).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Permite crear una sección de contenido que puede ser expandida o colapsada\n * por el usuario.\n */\n\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
  "src/components/ui/dialog.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Dialog).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Muestra contenido en una ventana modal o popup que se superpone a la página principal.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
  "src/components/ui/dropdown-menu.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Dropdown Menu).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Muestra un menú de opciones que aparece cuando el usuario interactúa con un\n * elemento (trigger), como un botón.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
  "src/components/ui/form.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Form).\n * Este archivo contiene componentes predefinidos de la biblioteca ShadCN/UI\n * para construir formularios robustos y accesibles. Se integra con `react-hook-form`\n * para la gestión del estado y la validación.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({ \n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n",
  "src/components/ui/input.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Input).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Proporciona un campo de entrada de texto estándar con estilos consistentes.\n */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
  "src/components/ui/label.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Label).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Muestra una etiqueta de texto, generalmente asociada a un campo de formulario.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
  "src/components/ui/menubar.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Menubar).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Proporciona una barra de menú horizontal, similar a la de las aplicaciones\n * de escritorio, para comandos y opciones.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n",
  "src/components/ui/popover.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Popover).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Muestra contenido flotante en relación a un elemento activador, ideal para\n * menús contextuales o información adicional.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n",
  "src/components/ui/progress.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Progress).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Muestra un indicador de progreso, como una barra de carga.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n",
  "src/components/ui/radio-group.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Radio Group).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Permite al usuario seleccionar una única opción de un conjunto de alternativas.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n",
  "src/components/ui/scroll-area.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Scroll Area).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Aumenta la funcionalidad de las áreas de desplazamiento con barras de\n * desplazamiento estilizadas.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n",
  "src/components/ui/select.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Select).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Muestra una lista de opciones en un menú desplegable para que el usuario elija una.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n",
  "src/components/ui/separator.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Separator).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Se utiliza para crear una línea delgada que separa visualmente grupos de contenido.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
  "src/components/ui/sheet.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Sheet).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Muestra contenido en un panel que se desliza desde un lado de la pantalla,\n * ideal para menús de navegación o carritos de compra.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n",
  "src/components/ui/sidebar.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Sidebar).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Proporciona una barra lateral de navegación que puede ser fija, flotante,\n * colapsable o responsiva.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)))\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n",
  "src/components/ui/skeleton.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Skeleton).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Se utiliza para mostrar un marcador de posición de la interfaz mientras\n * el contenido se está cargando, mejorando la experiencia del usuario.\n */\nimport { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
  "src/components/ui/slider.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Slider).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Permite al usuario seleccionar un valor de un rango mediante un control deslizante.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
  "src/components/ui/switch.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Switch).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Es un control de dos estados que permite al usuario alternar entre encendido y apagado.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n",
  "src/components/ui/table.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Table).\n * Este archivo contiene componentes predefinidos de la biblioteca ShadCN/UI\n * para mostrar datos tabulares de forma clara y estructurada.\n */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
  "src/components/ui/tabs.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Tabs).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Permite organizar contenido en diferentes pestañas que el usuario puede seleccionar.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
  "src/components/ui/textarea.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Textarea).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Proporciona un campo de entrada de texto de varias líneas.\n */\nimport * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n",
  "src/components/ui/toast.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Toast).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Se utiliza para mostrar notificaciones emergentes no interactivas (toasts)\n * para dar feedback al usuario.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n",
  "src/components/ui/toaster.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Toaster).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Gestiona el renderizado de las notificaciones (toasts) en un portal\n * a nivel de la aplicación, utilizando el hook `useToast`.\n */\n\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n",
  "src/components/ui/tooltip.tsx": "/**\n * @fileoverview Componente de UI de ShadCN (Tooltip).\n * Este archivo contiene un componente predefinido de la biblioteca ShadCN/UI.\n * Muestra información adicional cuando el usuario pasa el cursor sobre un elemento.\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
  "src/hooks/use-cart.ts": "/**\n * @fileoverview Hook personalizado para gestionar el estado del carrito de compras.\n * Proporciona la lógica para añadir, eliminar, actualizar productos y calcular el total.\n * Utiliza el `localStorage` del navegador para persistir el estado del carrito\n * entre sesiones.\n */\n\"use client\"\n\nimport * as React from 'react';\nimport type { Product, CartItem } from '@/lib/definitions';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface CartContextType {\n  cartItems: CartItem[];\n  addToCart: (product: Product, quantity?: number) => void;\n  removeFromCart: (productId: string) => void;\n  updateQuantity: (productId: string, quantity: number) => void;\n  clearCart: () => void;\n  cartTotal: number;\n}\n\nconst CartContext = React.createContext<CartContextType | undefined>(undefined);\n\nexport function CartProvider({ children }: { children: React.ReactNode }) {\n  const [cartItems, setCartItems] = React.useState<CartItem[]>([]);\n  const { toast } = useToast();\n\n  React.useEffect(() => {\n    const storedCart = localStorage.getItem('royal-fernet-cart');\n    if (storedCart) {\n      setCartItems(JSON.parse(storedCart));\n    }\n  }, []);\n\n  React.useEffect(() => {\n    localStorage.setItem('royal-fernet-cart', JSON.stringify(cartItems));\n  }, [cartItems]);\n  \n  const addToCart = (product: Product, quantity: number = 1) => {\n    setCartItems(prevItems => {\n      const existingItem = prevItems.find(item => item.product.id === product.id);\n      if (existingItem) {\n        return prevItems.map(item =>\n          item.product.id === product.id\n            ? { ...item, quantity: item.quantity + quantity }\n            : item\n        );\n      }\n      return [...prevItems, { product, quantity }];\n    });\n    toast({\n        title: \"Added to cart\",\n        description: `${product.name} has been added to your cart.`,\n    });\n  };\n\n  const removeFromCart = (productId: string) => {\n    setCartItems(prevItems => prevItems.filter(item => item.product.id !== productId));\n  };\n\n  const updateQuantity = (productId: string, quantity: number) => {\n    if (quantity < 1) {\n      removeFromCart(productId);\n      return;\n    }\n    setCartItems(prevItems =>\n      prevItems.map(item =>\n        item.product.id === productId ? { ...item, quantity } : item\n      )\n    );\n  };\n\n  const clearCart = () => {\n    setCartItems([]);\n  }\n\n  const cartTotal = cartItems.reduce((total, item) => {\n    const price = item.product.discount \n        ? item.product.price - (item.product.price * item.product.discount / 100)\n        : item.product.price;\n    return total + price * item.quantity\n  }, 0);\n\n  return React.createElement(CartContext.Provider, {\n    value: { cartItems, addToCart, removeFromCart, updateQuantity, clearCart, cartTotal }\n  }, children);\n}\n\nexport function useCart() {\n  const context = React.useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}\n",
  "src/hooks/use-mobile.tsx": "/**\n * @fileoverview Hook personalizado para detectar si el dispositivo es móvil.\n * Devuelve `true` si el ancho de la ventana es menor que un punto de ruptura\n * definido (768px), permitiendo renderizar componentes de forma condicional.\n */\nimport * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n",
  "src/hooks/use-toast.ts": "/**\n * @fileoverview Hook personalizado para mostrar notificaciones (toasts).\n * Permite gestionar la visualización de mensajes emergentes para informar\n * al usuario sobre acciones, errores o eventos importantes.\n */\n\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n",
  "src/lib/actions.ts": "\n/**\n * @fileoverview Server Actions para la aplicación.\n * Este archivo centraliza las operaciones de backend que se pueden invocar directamente\n * desde los componentes de React. Se encarga de la lógica de negocio como la autenticación\n * de usuarios, la gestión de productos y la administración de usuarios, interactuando con la API de Python.\n * Utiliza 'revalidatePath' para asegurar que los datos se actualicen en el cliente\n * después de una mutación.\n */\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { redirect } from 'next/navigation';\nimport { generateInvoice, GenerateInvoiceInput } from '@/ai/flows/invoice-generator-flow';\nimport { fetchProductById } from './data';\n\nconst API_BASE_URL = 'http://127.0.0.1:5000/api'; // Usa la URL absoluta en el servidor\n\nexport async function loginUser(formData: FormData) {\n  const email = formData.get('email');\n  const password = formData.get('password');\n  \n  // Esta es la \"llave maestra\" para el super admin.\n  if (email === 'master@royalfernet.com' && password === 'supersecret') {\n    console.log('Inicio de sesión de administrador maestro exitoso.');\n    redirect('/admin/dashboard');\n  }\n\n  try {\n    const res = await fetch(`${API_BASE_URL}/login`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password }),\n    });\n\n    if (!res.ok) { \n        // Si las credenciales son inválidas, redirige con un error.\n        return redirect('/admin?error=InvalidCredentials'); \n    }\n    const user = await res.json();\n    // Aquí establecerías una cookie de sesión o un token para el usuario logueado.\n    // Ejemplo: cookies().set('session', user.token, { httpOnly: true, path: '/' });\n    \n    // Si el login es exitoso, redirige al dashboard.\n    redirect('/admin/dashboard');\n  } catch (error) {\n    console.error(\"Error de conexión durante el login:\", error);\n    // Si hay un error de red (backend no disponible), redirige con un error.\n    return redirect('/admin?error=ConnectionFailed');\n  }\n}\n\nexport async function registerUser(formData: FormData) {\n  const name = formData.get('name');\n  const email = formData.get('email');\n  const password = formData.get('password');\n  \n  await fetch(`${API_BASE_URL}/register`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ name, email, password }),\n  });\n  \n  redirect('/login');\n}\n\nexport async function addProduct(formData: FormData) {\n  const images = [\n    formData.get('image1'),\n    formData.get('image2'),\n    formData.get('image3'),\n    formData.get('image4'),\n  ].filter(img => img && typeof img === 'string' && img.trim() !== '').map(img => (img as string).trim());\n\n  const productData = {\n    name: formData.get('name'),\n    description: formData.get('description'),\n    category: formData.get('category'),\n    price: Number(formData.get('price')),\n    discount: Number(formData.get('discount')) || undefined,\n    images: images,\n    isFeatured: formData.get('isFeatured') === 'on',\n  };\n\n  const res = await fetch(`${API_BASE_URL}/products`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(productData),\n  });\n  \n  if (!res.ok) { \n    console.error(\"Falló al añadir el producto\", await res.text());\n    return { error: 'Falló al añadir el producto' }; \n  }\n  \n  revalidatePath('/admin/dashboard');\n  revalidatePath('/catalog');\n  revalidatePath('/');\n  redirect('/admin/dashboard');\n}\n\nexport async function updateProduct(id: string, formData: FormData) {\n    const images = [\n      formData.get('image1'),\n      formData.get('image2'),\n      formData.get('image3'),\n      formData.get('image4'),\n    ].filter(img => img && typeof img === 'string' && img.trim() !== '').map(img => (img as string).trim());\n\n    const productData = {\n        name: formData.get('name'),\n        description: formData.get('description'),\n        category: formData.get('category'),\n        price: Number(formData.get('price')),\n        discount: Number(formData.get('discount')) || undefined,\n        images: images,\n        isFeatured: formData.get('isFeatured') === 'on',\n    };\n\n    const res = await fetch(`${API_BASE_URL}/products/${id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(productData),\n    });\n\n    if (!res.ok) { \n        console.error(\"Falló al actualizar el producto\", await res.text());\n        return { error: 'Falló al actualizar el producto' }; \n    }\n\n    revalidatePath('/admin/dashboard');\n    revalidatePath(`/product/${id}`);\n    revalidatePath('/catalog');\n    revalidatePath('/');\n    redirect('/admin/dashboard');\n}\n\nexport async function deleteProduct(id: string) {\n    const res = await fetch(`${API_BASE_URL}/products/${id}`, {\n      method: 'DELETE',\n    });\n    if (!res.ok) { \n        console.error(\"Falló al eliminar el producto\", await res.text());\n        return { error: 'Falló al eliminar el producto' }; \n    }\n    \n    revalidatePath('/admin/dashboard');\n    revalidatePath('/catalog');\n    revalidatePath('/');\n}\n\nexport async function addAdmin(formData: FormData) {\n  const adminData = {\n    name: formData.get('name'),\n    email: formData.get('email'),\n    password: formData.get('password'),\n  };\n  \n  const res = await fetch(`${API_BASE_URL}/admins`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(adminData),\n  });\n\n  if (!res.ok) {\n    console.error(\"Falló al añadir el administrador\", await res.text());\n    return { error: 'Falló al añadir el administrador' };\n  }\n\n  revalidatePath('/admin/dashboard');\n  redirect('/admin/dashboard');\n}\n\nexport async function updateStoreSettings(formData: FormData) {\n  const settingsData = {\n    title: formData.get('storeTitle'),\n    address: formData.get('storeAddress'),\n    hours: formData.get('storeHours'),\n    mainImageUrl: formData.get('storeMainImage'),\n    mapImageUrl: formData.get('storeMapImage'),\n    phone: formData.get('phone'),\n    contactEmail: formData.get('contactEmail'),\n    twitterUrl: formData.get('twitterUrl'),\n    instagramUrl: formData.get('instagramUrl'),\n    facebookUrl: formData.get('facebookUrl'),\n  };\n\n  const res = await fetch(`${API_BASE_URL}/settings`, {\n    method: 'POST', // Usamos POST para crear/actualizar\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(settingsData),\n  });\n\n  if (!res.ok) {\n    console.error(\"Falló al actualizar la configuración de la tienda\", await res.text());\n    return { error: 'Falló al actualizar la configuración de la tienda' };\n  }\n\n  revalidatePath('/admin/dashboard');\n  revalidatePath('/');\n  revalidatePath('/components/footer');\n  redirect('/admin/dashboard');\n}\n\nexport async function generateInvoiceAction(formData: FormData) {\n  const customerName = formData.get('customerName') as string;\n  const productId = formData.get('productId') as string;\n  const quantity = Number(formData.get('quantity'));\n\n  if (!productId) {\n    return { success: false, error: 'Por favor, selecciona un producto.' };\n  }\n\n  const product = await fetchProductById(productId);\n\n  if (!product) {\n    return { success: false, error: 'Producto no encontrado. Asegúrate de que el backend esté funcionando y que el producto exista.' };\n  }\n\n  const invoiceData: GenerateInvoiceInput = {\n    customerName: customerName,\n    productName: product.name,\n    quantity: quantity,\n    price: product.price,\n    invoiceNumber: `INV-${Date.now()}`,\n    date: new Date().toISOString().split('T')[0],\n  };\n\n  try {\n    const result = await generateInvoice(invoiceData);\n    return { success: true, html: result.invoiceHtml };\n  } catch (error) {\n    console.error(\"Error generating invoice:\", error);\n    return { success: false, error: 'No se pudo generar la factura. Revisa la configuración de Genkit/servicio de IA.' };\n  }\n}\n\nexport async function sendNotificationAction(formData: FormData): Promise<{success: boolean, error?: string}> {\n  const message = formData.get('message') as string;\n  const imageUrl = formData.get('imageUrl') as string;\n  const linkUrl = formData.get('linkUrl') as string;\n\n  if (!message) {\n      return { success: false, error: \"El mensaje es obligatorio.\" };\n  }\n  \n  const notificationData = {\n      message,\n      imageUrl: imageUrl || undefined,\n      linkUrl: linkUrl || undefined,\n  };\n  \n  try {\n    const res = await fetch(`${API_BASE_URL}/notifications`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(notificationData),\n    });\n\n    if (!res.ok) {\n      const errorText = await res.text();\n      console.error(\"Error al enviar la notificación:\", errorText);\n      return { success: false, error: `No se pudo enviar la notificación: ${errorText}` };\n    }\n    \n    console.log('Notificación enviada:', notificationData);\n    revalidatePath('/'); // Se revalida para que la notificación aparezca en la página principal.\n    return { success: true };\n\n  } catch (error) {\n    console.error(\"Error de red al enviar la notificación:\", error);\n    return { success: false, error: 'Ocurrió un error de red al enviar la notificación.' };\n  }\n}\n",
  "src/lib/data.ts": "/**\n * @fileoverview Funciones para obtener datos de la API.\n * Este archivo contiene la lógica para comunicarse con el backend.\n * Define funciones asíncronas para buscar todos los productos, administradores o un producto\n * específico por su ID.\n */\nimport type { Product, Admin, Notification, StoreSettings } from './definitions';\n\nconst API_BASE_URL = '/api';\n\nexport async function fetchProducts(query?: string): Promise<Product[]> {\n  const url = query ? `${API_BASE_URL}/products?q=${encodeURIComponent(query)}` : `${API_BASE_URL}/products`;\n  try {\n    const res = await fetch(url, { cache: 'no-store' });\n    if (!res.ok) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(`[DEV] Failed to fetch products (status: ${res.status}). This is expected if the Python backend is not running.`);\n      } else {\n        console.error(`Error fetching products: ${res.status} ${res.statusText}`);\n      }\n      return [];\n    }\n    let products: Product[] = await res.json();\n    // Ordena para que los productos destacados aparezcan primero\n    products.sort((a, b) => (b.isFeatured ? 1 : 0) - (a.isFeatured ? 1 : 0));\n    return products;\n  } catch (error) {\n    console.error('Network error while fetching products:', error);\n    return [];\n  }\n}\n\nexport async function fetchProductById(id: string): Promise<Product | undefined> {\n  try {\n    const res = await fetch(`${API_BASE_URL}/products/${id}`, { cache: 'no-store' });\n    if (res.status === 404) return undefined;\n    if (!res.ok) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(`[DEV] Failed to fetch product ${id} (status: ${res.status}). This is expected if the Python backend is not running.`);\n      } else {\n        console.error(`Error fetching product ${id}: ${res.status} ${res.statusText}`);\n      }\n      return undefined;\n    }\n    return await res.json();\n  } catch (error) {\n    console.error(`Network error while fetching product ${id}:`, error);\n    return undefined;\n  }\n}\n\nexport async function fetchAdmins(query?: string): Promise<Admin[]> {\n  const url = query ? `${API_BASE_URL}/admins?q=${encodeURIComponent(query)}` : `${API_BASE_URL}/admins`;\n  try {\n    const res = await fetch(url, { cache: 'no-store' });\n    if (!res.ok) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(`[DEV] Failed to fetch admins (status: ${res.status}). This is expected if the Python backend is not running.`);\n      } else {\n        console.error(`Error fetching admins: ${res.status} ${res.statusText}`);\n      }\n      return [];\n    }\n    return await res.json();\n  } catch (error) {\n    console.error('Network error while fetching admins:', error);\n    return [];\n  }\n}\n\nexport async function fetchLatestNotification(): Promise<Notification | null> {\n    try {\n        const res = await fetch(`${API_BASE_URL}/notifications/latest`, { cache: 'no-store' });\n        if (!res.ok) {\n            if (res.status === 404) return null; // Not found is not an error.\n            \n            if (process.env.NODE_ENV === 'development') {\n                console.warn(`[DEV] Failed to fetch notification (status: ${res.status}). This is expected if the Python backend is not running.`);\n            } else {\n                console.error(`Error fetching latest notification: ${res.status} ${res.statusText}`);\n            }\n            return null;\n        }\n        return await res.json();\n    } catch (error) {\n        console.error('Network error while fetching latest notification:', error);\n        return null;\n    }\n}\n\nexport async function fetchStoreSettings(): Promise<StoreSettings | null> {\n  try {\n    const res = await fetch(`${API_BASE_URL}/settings`, { cache: 'no-store' });\n    if (!res.ok) {\n      if (res.status === 404) return null; // Not found is not an error.\n\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(`[DEV] Failed to fetch store settings (status: ${res.status}). This is expected if the Python backend is not running.`);\n      } else {\n        console.error(`Error fetching store settings: ${res.status} ${res.statusText}`);\n      }\n      return null;\n    }\n    return await res.json();\n  } catch (error) {\n    console.error('Network error while fetching store settings:', error);\n    return null;\n  }\n}\n",
  "src/lib/definitions.ts": "/**\n * @fileoverview Definiciones de tipos de TypeScript para la aplicación.\n * Centraliza las interfaces y tipos de datos comunes, como `Product`, `CartItem` y `Admin`,\n * para garantizar la consistencia y el tipado estático en todo el proyecto.\n */\nexport type Product = {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  images: string[];\n  discount?: number; // Porcentaje de descuento opcional\n  category: string;\n  isFeatured?: boolean; // Para destacar productos relevantes\n};\n\nexport type CartItem = {\n  product: Product;\n  quantity: number;\n};\n\nexport type Admin = {\n  id: string;\n  name: string;\n  email: string;\n};\n\nexport type Notification = {\n  id: string;\n  message: string;\n  imageUrl?: string;\n  linkUrl?: string;\n  createdAt: string; // ISO date string\n};\n\nexport type StoreSettings = {\n  title: string;\n  address: string;\n  hours: string;\n  mainImageUrl: string;\n  mapImageUrl: string;\n  phone?: string;\n  contactEmail?: string;\n  twitterUrl?: string;\n  instagramUrl?: string;\n  facebookUrl?: string;\n};\n",
  "src/lib/utils.ts": "/**\n * @fileoverview Funciones de utilidad.\n * Contiene la función `cn`, que combina y fusiona clases de Tailwind CSS\n * de forma segura, evitando conflictos y facilitando la creación de\n * componentes con variantes de estilo condicionales.\n */\nimport { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
  "tailwind.config.ts": "/**\n * @fileoverview Archivo de configuración para Tailwind CSS.\n * Aquí se personaliza y extiende el sistema de diseño de Tailwind. Se definen\n * colores personalizados, tipografías, animaciones y otras utilidades que se\n * usarán en toda la aplicación.\n */\nimport type {Config} from 'tailwindcss';\n\nexport default {\n  darkMode: ['class'],\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      fontFamily: {\n        body: ['Montserrat', 'sans-serif'],\n        headline: ['Montserrat', 'sans-serif'],\n        code: ['monospace'],\n      },\n      colors: {\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        chart: {\n          '1': 'hsl(var(--chart-1))',\n          '2': 'hsl(var(--chart-2))',\n          '3': 'hsl(var(--chart-3))',\n          '4': 'hsl(var(--chart-4))',\n          '5': 'hsl(var(--chart-5))',\n        },\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      keyframes: {\n        'accordion-down': {\n          from: {\n            height: '0',\n          },\n          to: {\n            height: 'var(--radix-accordion-content-height)',\n          },\n        },\n        'accordion-up': {\n          from: {\n            height: 'var(--radix-accordion-content-height)',\n          },\n          to: {\n            height: '0',\n          },\n        },\n        \"fade-in-up\": {\n          \"0%\": {\n            opacity: \"0\",\n            transform: \"translateY(20px)\",\n          },\n          \"100%\": {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n        \"fade-in-up\": \"fade-in-up 0.8s ease-out forwards\",\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n} satisfies Config;\n",
  "tsconfig.json": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2017\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n"
}
